<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Effect Java Note(二)]]></title>
      <url>dooogo.github.io/2016/12/02/Effect-Java-Note-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h1><h3 id="1-覆盖equals时的通用约定"><a href="#1-覆盖equals时的通用约定" class="headerlink" title="1. 覆盖equals时的通用约定"></a>1. 覆盖equals时的通用约定</h3><p><strong>equals所期望的结果</strong></p>
<ul>
<li>类的每个实例本质上都是唯一的。</li>
<li>不关心类是否提供了“逻辑相等”的测试功能。</li>
<li>超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的。</li>
<li>类时私有的或者包私有的，可以确定它的equals方法永远不会调用。</li>
</ul>
<p><strong>需要覆盖的时机：</strong></p>
<p>父类没有实现所期望的以上的equals实现</p>
<blockquote>
<p>“最多只存在一个对象”的类不需要覆盖equals,例如枚举类型</p>
</blockquote>
<p><strong>equals的等价关系</strong></p>
<ul>
<li><p>自反性。任何非null引用值，x.equals(x)返回true。</p>
<p>Set集合中重复添加同意一个引用值会怎样？</p>
</li>
<li><p>对称性。对于任何非null的x和y,x.equals(y) 返回true，那么y.equals(x) 也返回true。</p>
<p>自定义类A实现了不区分大小写的比较,new A(“Aa”).equals(“aa”)返回true，但是“aa”.equals(new A(“Aa”))的返回值却由String类中的equals方法决定。</p>
</li>
<li><p>传递性。对于任何非null的x,y,z，如果x.equals(y) 为true，且 y.equals(z) 也为true，那么x.equals(z) 也为true。</p>
<p>存在扩展可实例化与增加主键值的时候，容易违反传递性。考虑使用抽象类并在其子类中添加属性，例如Shape。</p>
</li>
<li><p>一致性。对于任何非null引用值x,y，只要x.equals(y)返回true，那么在引用对象信息没有被修改，那么每次返回的仍是一致的true。</p>
<p>要保证一致性，不要使equals依赖于不可靠的的资源。例如java..net.URL的equals依赖于主机的IP,IP可能随着时间的推移而改变。</p>
</li>
<li><p>对于任何非null引用值x,x.equals(null)必须返回false。</p>
</li>
</ul>
<p><strong>高质量equals</strong></p>
<ol>
<li>使用==检查是待比较参数是否是同意对象引用本身</li>
<li>使用instanceof检查参数是否是正确类型</li>
<li>把参数转换成正确的类型，使用instanceof判断</li>
<li>检查参数中域与该对象中的对应域相匹配。</li>
<li>除float 、double外的基本类型使用==比较</li>
<li>对象引用域可以递归调用equals</li>
<li>对于float,double分别使用Float.compare()，Double.compare()</li>
<li>数组判等使用Arrays.equals()。</li>
<li>对于允许null的域，尽可能避免NullPointException，可以做判空操作</li>
<li>对个域比较的时候，或者比较比较步骤较多的时候，比较顺序从最有可能不一致的开始</li>
</ol>
<p><strong>注意点</strong></p>
<ul>
<li>覆盖equals的时候总要覆盖hashCode</li>
<li>不要让equals过于智能。过度的寻求某种不必要的等价关系。</li>
<li>不要将equals中参数转换成其他类型。某些情况能增加性能，但是比较复杂性会增加（不推荐）。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本应该是：</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="keyword">equals</span>(Object o)&#123;</span><br><span class="line">  <span class="attr">...</span>.</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转换参数成其他类型：</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="keyword">equals</span>(MyClass o)&#123;</span><br><span class="line">  <span class="attr">...</span>.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加上@Override导致变异不通过，因为父类的equals方法不存在此重写方法。</span></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="keyword">equals</span>(MyClass o)&#123;</span><br><span class="line">  <span class="attr">...</span>.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-覆盖equals时总要覆盖hashCode"><a href="#2-覆盖equals时总要覆盖hashCode" class="headerlink" title="2.覆盖equals时总要覆盖hashCode"></a>2.覆盖equals时总要覆盖hashCode</h3><p> <strong>JavaSE6中的Object规范</strong></p>
<ul>
<li>程序执行期间，对象的equals方法所用到的比较信息没有被修改，对同一个对象的多次调用hashCode始终如一的返回同一个整数，但是多次执行的过程中，所返回的整数可以不一致（信息修改后）。</li>
<li>两个对象的equals返回true，那么这两个对象的hashCode返回的整数必须相等。（所以覆盖equals总要覆盖hashCode）</li>
<li>两个对象的equals返回false，那么不要求两个对象的hashCode返回不一样的整数结果，但是在使用hash的相关集合框架中，返回不一样的结果能提高性能</li>
</ul>
<p>HashMap，HashSet等hash集合框架，依赖元素的hashCode进行散列，因此当equals返回true的时候，hashCode返回的结果也一样，可以保证是一个相等的元素。在put ,get,remove等操作均会使用到元素的hashCode。因此hashcode能影响到HashMap等Hash结合框架的性能。</p>
<p><strong>计算hashcode的一些方法：</strong></p>
<ul>
<li>boolean  计算（f?1:0）</li>
<li>byte,char,short,int 计算(int)f</li>
<li>long  计算(int)(f^(f&gt;&gt;&gt;32))</li>
<li>float  计算Float.floatToInBits(f);</li>
<li>double  计算Double.doubleToLongBits(f),得到的结果再按long类型处理</li>
<li>对象引用  null则返回0，否则递归调用hashCode</li>
<li>数组  用以上规则计算每个元素的hashCode，或则使用Arrays.hashCode()</li>
</ul>
<p><strong>最后返回将上述计算得到的结果c,（result = 31 * result +c），返回 result。</strong></p>
<p><strong>注意：散列码计算过程中排除掉冗余域，也就是没有参与到equals中的域</strong></p>
<blockquote>
<p>上述使用到了31进行最后结果的处理，因为31有一个很好的特性是可以使用移位和减法来代替乘法。31*i = (i&lt;&lt;5)-i 而且VM会自动完成这种优化。</p>
</blockquote>
<p>此外散列码的计算可能是开销很大的，可以考虑懒加载，既是只在第一次调用hashCode的时候进行计算，然后结果保存在实例中，下次直接返回保存的结果。但是前提是类是不可变的。</p>
<h3 id="3-始终覆盖toString"><a href="#3-始终覆盖toString" class="headerlink" title="3.始终覆盖toString"></a>3.始终覆盖toString</h3><p><strong>Object默认的toString返回的结果是：类名@xxxxxx,其中xxxxxx是该对象的散列码的十六进制表示</strong></p>
<p>覆盖toString方法可以在调试或者打印对象信息的时候更易于阅读理解。</p>
<p>但是在该类被广泛使用的时候要保证toString的返回格式的一致性，可利于维护。</p>
<h3 id="4-谨慎覆盖clone"><a href="#4-谨慎覆盖clone" class="headerlink" title="4.谨慎覆盖clone"></a>4.谨慎覆盖clone</h3><p> 在JavaSE6中的clone方法的通用约定：</p>
<table>
<thead>
<tr>
<th>x.clone()!=x</th>
<th>true</th>
</tr>
</thead>
<tbody>
<tr>
<td>x.clone().getClass() == x.getClass()</td>
<td>true(不绝对要求如此)</td>
</tr>
<tr>
<td>x.clone().equals(x)</td>
<td>true(不绝对要求如此)</td>
</tr>
</tbody>
</table>
<p>​               </p>
<p><strong>Object中的clone方法是protected的，而一个类实现了Cloneable接口改变了clone的行为，是的clone可以返回一个该对象得到逐域拷贝对象，使得不通过构造器就可以生成一个对象，否则抛出CloneNotSupportedExcetion。</strong></p>
<p>如果覆盖了非final类的clone方法，则应该返回一个通过super.clone()得到的对象。而对于实现了Cloneable接口的类，如果所有超类否提供了良好的clone实现，那么我们可以在实现了Cloneable的子类实现一个共有的clone的方法，否则我们不应该提供任何clone实现。</p>
<p>当需要clone的类中存在引用类型且不是final的域的时候，我们仍需要调用该引用对象的clone方法进行clone。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Wheel <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> (Wheel)<span class="keyword">super</span>.clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">  Wheel wheel;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Car <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      Car car = (Car)<span class="keyword">super</span>.clone();</span><br><span class="line">      car.wheel = wheel.clone();<span class="comment">//省略这一行，那么car.wheel == this.wheel(浅拷贝)</span></span><br><span class="line">      <span class="keyword">return</span> car;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一种情况，存在引用链的情况下，我们需要递归的进行复制</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> HashTable <span class="keyword">implements</span> Cloneable&#123;</span><br><span class="line">  <span class="keyword">private</span> Entry[] buckets = .....;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Entry&#123;</span><br><span class="line">    <span class="keyword">final</span> Object key;</span><br><span class="line">    Object value;</span><br><span class="line">    Entry <span class="keyword">next</span>;</span><br><span class="line">    Entry(Object key,Object value,Entry e)&#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> deepCopy()&#123;</span><br><span class="line">      <span class="comment">//递归调用可能会栈溢出</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Entry(key,value,<span class="keyword">next</span>==<span class="keyword">null</span>?<span class="keyword">null</span>:<span class="keyword">next</span>.deepCopy());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//使用迭代</span></span><br><span class="line">      Entry e = <span class="keyword">new</span> Entry(key,value,<span class="keyword">next</span>);</span><br><span class="line">      <span class="keyword">for</span>(Entry p = e;p.<span class="keyword">next</span>!=<span class="keyword">null</span>;p=p.<span class="keyword">next</span>)</span><br><span class="line">      	p.<span class="keyword">next</span> = <span class="keyword">new</span> Entry(key,value,p.<span class="keyword">next</span>.<span class="keyword">next</span>);</span><br><span class="line">      <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> HashTable clone()&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      </span><br><span class="line">      HashTable ht =(HashTable)<span class="keyword">super</span>.clone();</span><br><span class="line">      <span class="comment">//这样得到的buckets中的元素与this的buckets中的元素时指向同一个对象的（浅拷贝）</span></span><br><span class="line">      <span class="comment">//ht.buckets = buckets.clone();</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//单独拷贝每个buckets中的链表元素（深拷贝）</span></span><br><span class="line">      ht.buckets = <span class="keyword">new</span> Entry[buckets.length];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,s=buckets.lenght;i&lt;s;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(buckets[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          ht.buckets[i] = buckets[i].deepCopy();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ht;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>多线程环境霞需要自己实现同步的clone</strong></p>
<p>其他实现对象拷贝的方法：</p>
<p><strong>拷贝构造函器</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">Car</span>(Car car)&#123;</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>静态工厂拷贝方法</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Car <span class="title">newInstance</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java中的使用例子：</p>
<p>基于接口的拷贝：Collection, Map。HashSet hs = new HashSet(); TreeSet ts = new TreeSet(hs);</p>
<h3 id="4-考虑实现Comparable接口"><a href="#4-考虑实现Comparable接口" class="headerlink" title="4.考虑实现Comparable接口"></a>4.考虑实现Comparable接口</h3><p>comparable接口属于一个泛型接口，一个类实现了该接口可以和许多依赖该接口的集合实现协作功能，很明显的一个功能就是内在的排序关系。</p>
<p>Comparable接口中待实现的的方法是compareTo(T t)。返回正整数，0，负整数来表示当前对象大于，等于，小于参数对象。</p>
<p>compareTo同样应该满足：<strong>自反性，传递性，对称性</strong></p>
<p>compareTo返回0是，同样应该满足equals返回true</p>
<p>compareTo需要比较的值域较多是，从最右可能产生不一致的域开始比较，依次类推</p>
<p>对于float double类型的比较，使用Float.compare() ,Double.compare();</p>
<p>compareTo与equals的差别是compareTo是参数化的，不必进行参数转化，此外其他的很多equals中的特点同样适用与compareTo。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[打印1到最大的n位数]]></title>
      <url>dooogo.github.io/2016/11/27/%E6%89%93%E5%8D%B01%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一个整数n（0&lt;n）,按顺序打印从1到最大的n位十进制数。例如输入4，则打印出1,2,3,4，…，9998,9999.</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>该题目的首要限制点时n可以很大，如果n&gt;=32，那么坑定超过了int的表示范围，即使是long类型的也无法避免这个问题。那么我们是否可以用字符串呢？我想那是肯定的。而字符串我们可以转换成字符数组，这样更方便操作。而实际操作我们需要注意的是每次都是从最后一个字符开始（因为对应的是个位），进行“加一”操作，产生进位的时候向前一位“加一”，直到没有了进位，或则第0个字符处产生了进位，那么说明已经到最大的那个n位数，打印结束。而每次“加一”后我们进行一次打印操作，需要注意的是，假设此时的字符串时000123，那么我们打印的其实是123，所以我们是从第一个不是‘0’的地方开始输出结果的。</p>
<p><strong>拓展一下其实可以不用字符的，用byte数组也是可以的，因为只用0到9是个数字</strong></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> printN(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">char</span> num[] = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) <span class="comment">//初始化字符串</span></span><br><span class="line">            num[i] = <span class="string">'0'</span>;</span><br><span class="line">        num[n - <span class="number">1</span>] = <span class="string">'1'</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isEnd = <span class="keyword">false</span>;<span class="comment">//是否已经是最大的n位数</span></span><br><span class="line">        <span class="keyword">while</span> (!isEnd) &#123;</span><br><span class="line">            printNum(num);</span><br><span class="line">            isEnd = inc(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加一操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> inc(<span class="keyword">char</span>[] num) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isUp = <span class="keyword">false</span>; <span class="comment">//是否产生了进位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">sum</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == num.length - <span class="number">1</span>) &#123;  <span class="comment">//个位“加一”</span></span><br><span class="line">                <span class="keyword">sum</span> = num[i] - <span class="string">'0'</span> + <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//个位“加一”后产生进位，则继续向前加一</span></span><br><span class="line">                <span class="keyword">sum</span> = num[i] - <span class="string">'0'</span> + (isUp ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">sum</span> == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)  <span class="comment">//第0位产生进位，已经时最大的n位数，返回true结束循环</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                isUp = <span class="keyword">true</span>;</span><br><span class="line">                num[i] = <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//“没有进位了直接返回”</span></span><br><span class="line">                num[i] = (<span class="keyword">char</span>) (<span class="keyword">sum</span> + <span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> printNum(<span class="keyword">char</span> num[]) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isNum = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> aNum : num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aNum != <span class="string">'0'</span> &amp;&amp; !isNum) &#123; <span class="comment">//遇到第一个非‘0’字符，开始打印其（包括本身）之后的字符</span></span><br><span class="line">                isNum = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isNum) &#123;</span><br><span class="line">                System.out.print(aNum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Effect Java Note(一)]]></title>
      <url>dooogo.github.io/2016/11/26/Effect-Java-Note-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Effect-Java-Note-一"><a href="#Effect-Java-Note-一" class="headerlink" title="Effect Java Note (一)"></a>Effect Java Note (一)</h1><h3 id="一、对象的创建和销毁"><a href="#一、对象的创建和销毁" class="headerlink" title="一、对象的创建和销毁"></a>一、对象的创建和销毁</h3><h4 id="1-考虑使用静态工厂方法替代构造器"><a href="#1-考虑使用静态工厂方法替代构造器" class="headerlink" title="1. 考虑使用静态工厂方法替代构造器"></a>1. 考虑使用静态工厂方法替代构造器</h4><p><strong>优点</strong></p>
<ol>
<li>静态工厂方法可以有一个名称，易于理解与阅读，工厂方法的名称可以凸显出不同构造器的区别</li>
<li>每次掉用的时候可以不用都创建一个新的对象，而是可以选择复用对象，在一些情况就可以直接使用==判断相等，而不是equals</li>
<li>可以返回原返回类型的任意子类型。可以参考java的集合框架。使用接口来引用被返回的对象，而不是通过实现类来返回对象引用是一个好习惯。</li>
<li>在创建参数化类型实例的时候代码更简洁。例如通过类型推倒与泛型：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">HashMap&lt;K,V&gt; <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K,V&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String,List&lt;String&gt;&gt; m = HashMap.newInstance();</span><br></pre></td></tr></table></figure>
<p><strong>缺点</strong></p>
<ol>
<li>如果类不含有共有或者受保护的构造器，那么将不能被子类化。（可以通过组合化解）</li>
<li>与其他的静态方法没有实质差别。一个好的命名这时候就很重要了，让人一看就知道是一个静态方法的作用。</li>
</ol>
<p><strong>静态工厂方法和构建器对于有多个可选参数的时候，将增加复杂度与降低可读性</strong></p>
<h4 id="2-遇到多个构造器参数时考虑使用构建器"><a href="#2-遇到多个构造器参数时考虑使用构建器" class="headerlink" title="2. 遇到多个构造器参数时考虑使用构建器"></a>2. 遇到多个构造器参数时考虑使用构建器</h4><p>重叠构造器在少数参数的时候可以，可以方便按需选择构造器，但是参数很多的时候，很容易造成混乱，阅读型也会大大下降。有时候即使参数类型是对的，但是最终结果也可能时错误的。</p>
<p>此外基于JavaBeans思想可以使用 setXXX，为每个参数设置setter方法，这样每个构造参数都能很容易理解其作用，但是一个很严重的缺点是：构造的过程被分配到了几个调用过程，容易造成不一致状态（尤其时多线程环境下），而要保证一致状态需要付出很多精力去维护。</p>
<p>构建器一般是一个需要实例化的类的静态内部类，提供了对参数的默认设置，同时对外可以提供链式调用进行构造。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Car car = <span class="keyword">new</span> Car.Builder().name(<span class="string">"benz"</span>).wheels(<span class="number">4</span>).color(Color.BLACK).build();</span><br></pre></td></tr></table></figure>
<p>而且在Builder的每个域中都可以进行约束判断，违反约束条件的情况可以跑出非法异常。Builder很好的结合了setter和重叠构造器的优点，参数数量可以更灵活，阅读性更好</p>
<p>还可以考虑使用抽象工厂：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>缺点</strong></p>
<p>为了构造一个实例需要多生成一个实例（Builder类）。</p>
<h4 id="3-使用私有构造器或者枚举类型强化单例（Singleton）"><a href="#3-使用私有构造器或者枚举类型强化单例（Singleton）" class="headerlink" title="3. 使用私有构造器或者枚举类型强化单例（Singleton）"></a>3. 使用私有构造器或者枚举类型强化单例（Singleton）</h4><ol>
<li>一个类中之提供了一个私有的无参构造器，防止类外进行实例化。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CEO</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CEO INSTANCE  = <span class="keyword">new</span> CEO();</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CEO</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>但是，无参私有构造器可以通过反射的setAccessible()修改</strong></p>
<p>解决这个问题则需要在无参构造器中加入判断，当进行第二个实例化的时候抛出异常。还以提供友好的getInstance()公共静态方法。</p>
<p>如果该类实现了序列化，那么需要重写readResolve,防止反序列化时创建一个新的实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过枚举实现Singleton，无偿提供序列化机制，绝对防止多次实例化，简洁的同时功能和公有域很相似。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CEO&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speech</span><span class="params">()</span></span>&#123;....&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;....&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工具类中加入私有无参构造器，防止实例化是个很好的习惯。</p>
<h4 id="4-避免不必要的对象创建"><a href="#4-避免不必要的对象创建" class="headerlink" title="4. 避免不必要的对象创建"></a>4. 避免不必要的对象创建</h4><ol>
<li>不要使用 new String(“text”);，这实际上创建了两个实例。</li>
<li>能重用对象的时候尽量重用对象，但是需要避免重用对象造成的错误，得不偿失。</li>
<li>避免不必要的额自动装箱工作，能用原生类型就用原生类型。</li>
<li>慎重使用对象池，维护起来需要很多工作。</li>
</ol>
<h4 id="5-消除过期的对象的引用"><a href="#5-消除过期的对象的引用" class="headerlink" title="5. 消除过期的对象的引用"></a>5. 消除过期的对象的引用</h4><ol>
<li>在一下设计的Stack出栈方法中：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">  	<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackExcetiop();</span><br><span class="line">  <span class="keyword">return</span> elements[--size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过多次push增长后，pop掉的元素依然在Stack中保持有过期引用并由Stack管理着，而这些过期引用后期不在被使用，却不能被垃圾回收器进行回收。导致内存泄露。可以做一下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">  	<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackExcetiop();</span><br><span class="line">  	Object o = elements[--size];</span><br><span class="line">  	element[size] = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>设计自己管理内存的时候，都需要警惕内存泄露带来的问题</strong></p>
<ol>
<li>缓存带来内存泄露可能是缓存引用不在使用但是仍然长时间留在缓存中。</li>
</ol>
<ul>
<li>当设计的缓存项的生命周期由该键的外部引用决定时可以使用WeakHashMap</li>
<li>可以使用Timer或者ScheduleThreadPoolExecutor设计一个后台线程进行引用清理工作</li>
<li>LinkedHashMap的removeEldsetEntry管理缓存，实现添加新缓存项的同时清除旧的缓存项</li>
</ul>
<ol>
<li>回调与监听导致的内存泄露是因为，不使用的时候没有显示的取消注册，否则不断的注册回调或者监听会不断积累。可以只保存监听的弱引用。</li>
</ol>
<h4 id="6-避免使用终结方法"><a href="#6-避免使用终结方法" class="headerlink" title="6. 避免使用终结方法"></a>6. 避免使用终结方法</h4><ol>
<li>避免尽量避免使用finalize（）终结方法，因为jvm不能保证何时执行，或者是否执行，执行需要多长时间。</li>
<li>涉及资源释放的的时候，尽可能的使用显示终结方法，例如流操作中的close()方法，一般使用try..catch..finally，并在finally中调用close()操作。</li>
<li>但是finalize方法可以作为最后的安全网操作，也就是在不显示终结的时候提供最后的终结调用，长时间释放资源总比不释放资源好。或者是用来释放非关键本地自愿的额时候使用。</li>
</ol>
<p><strong>子类覆盖了父类的finalize方法，那么需要显示调用父类的finalize，super.finalize();</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[n之中的所有m元素的逆字典序排列组合]]></title>
      <url>dooogo.github.io/2016/11/26/n%E4%B9%8B%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89m%E5%85%83%E7%B4%A0%E7%9A%84%E9%80%86%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>题目原型大概如下：</p>
<p>学校要评优秀学生，有十个平时都很优秀的学生，他们之间不相上下，但是评选的名额有限，假设学生人数是n(0&lt;n&lt;=10),评选的名额数时m(0&lt;m&lt;=n),那么希望随机从n名学生中选出m个学生，并且按字典序的列出所有可能的获得优秀的学生名额。n个学生的序号时从 1….n.</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：</p>
<p>5   2</p>
<p>输出：</p>
<p>54<br>53<br>52<br>51<br>43<br>42<br>41<br>32<br>31<br>21</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>假设n个学生的序号是[1,2,…,n]，从中选m个学生，我们生成一个长度为m的数组，记录选学生的序号索引，例如n=5,m=2,那么index=[0,1]是一开始的选择学生的索引，index=[n-m,n-m+1]=[3,4]是最后一种情况，这里说明一下如何通过index数组求出编号，因为开始我们是从最小索引开始，那么用n-index[i] (0&lt;=i&lt;m)就是对应的学生编号，而且恰好能按照字典序由大到小的计算得到学生序号。</p>
<p>关键是在于index数组从开始态到啊结束态的不断变化，其实细心点可以发现，我们每移动一次（相当于+1）index末尾元素就可以得到一种选择的情况，而当最后一个元素加一后，其值超过它自己对应的最右位置时，我们就需要从最右开始找到与最右元素连续的索引位置，让这部分元素的索引从左边未移动过的最右那个元素的下一个位置开始标记自己的索引，而那个左边未移动过的最右那个元素的索引也开始移动一位，以此往复，知道所有元素的索引位置都到达了自己能到达的最终位置，结束。</p>
<p>示例：</p>
<p>假设 n = 6,m=3;end=[3,4,5]对应m=3个学生移动的最终索引位置，index=[0,1,2];这是最开始的m=3个学生的索引位置。</p>
<p><strong>start:</strong></p>
<p>index : 0,1,2</p>
<p>stuno: 1,2,3,4,5,6</p>
<p><strong>index末尾元素到达自己所能到达的最后位置（+1后超出）</strong></p>
<p>index : 0,1,          5     </p>
<p>stuno: 1,2,3,4,5,6</p>
<p><strong>下一步的索引变化</strong></p>
<p>index : 0,   2,3</p>
<p>stuno: 1,2,3,4,5,6</p>
<p><strong>再比如</strong></p>
<p>index : 0,         4,5</p>
<p>stuno: 1,2,3,4,5,6</p>
<p><strong>下一步将是</strong></p>
<p>index :    1,2,3</p>
<p>stuno: 1,2,3,4,5,6</p>
<p><strong>最后将是</strong></p>
<p>index :           3,4,5</p>
<p>stuno: 1,2,3,4,5,6</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意end index中保存的索引时相对于n来说的范围时[0,1,...,n-2,n-1]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> getAllCase(<span class="keyword">int</span> n,<span class="keyword">int</span> m)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">0</span> || m&lt;=<span class="number">0</span> || m&gt;n)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> end[] = <span class="keyword">new</span> <span class="keyword">int</span>[m];  <span class="comment">//选中的m学生对应的末尾索引</span></span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">index</span>[] = <span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">//当前选中的m个学生的索引值</span></span><br><span class="line">  <span class="comment">//初始化end  和 index</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    end[i] = n - m + i;<span class="comment">//计算第i个选中的学生能到达的末尾索引</span></span><br><span class="line">    <span class="keyword">index</span>[i] = i; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> l = m - <span class="number">1</span>;<span class="comment">//第m个学生（最后一个学生）对应于m的索引</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    print(<span class="keyword">index</span>, n, m);</span><br><span class="line">    <span class="keyword">index</span>[l]++; <span class="comment">//每次都是第m个学生的索引值加一（最后一个）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span>[l] &gt; end[l]) &#123; <span class="comment">//超过他自己本来只能到达的最大索引，说明需要进行下一轮</span></span><br><span class="line">      <span class="keyword">int</span> t = l;</span><br><span class="line">      <span class="comment">//找到l位置之前已经达到末尾位置的第一个没有到达对应末尾位置的的下标</span></span><br><span class="line">      <span class="keyword">while</span> (t &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">index</span>[t] &gt;= end[t]) &#123;</span><br><span class="line">        t--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果t大于等0说明上面while循环要找到的位置时存在的</span></span><br><span class="line">      <span class="keyword">if</span> (t &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="keyword">index</span>[t];<span class="comment">//上一步找到的第一个没有到达对应末尾位置的元素（从右往左）对应于n的索引值。</span></span><br><span class="line">        <span class="comment">//从t到m-1除的元素索引加一（相当于后移一位，依次排列在t之后，注意：第一次的t位置就已经开始加一）</span></span><br><span class="line">        <span class="keyword">while</span> (t &lt; m) &#123;</span><br><span class="line">          <span class="keyword">index</span>[t++] = ++s;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则说明说明位置都已经到达末尾，既是所有情况都已经遍历了一次</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据当前的索引数组答应选中的学生序号，因为索引数组时从0开始的，那么n-index[i]恰好得到对应的序号</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">void</span> print(<span class="keyword">int</span> <span class="keyword">index</span>[], <span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    System.out.print(n - <span class="keyword">index</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 性能优化总结]]></title>
      <url>dooogo.github.io/2016/10/25/Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="将从以下几个方面总结Android的应用性能优化"><a href="#将从以下几个方面总结Android的应用性能优化" class="headerlink" title="将从以下几个方面总结Android的应用性能优化"></a>将从以下几个方面总结Android的应用性能优化</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul>
<li>框架API</li>
<li>UI 性能</li>
<li>I/O性能</li>
<li>屏幕滚动性能</li>
</ul>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul>
<li>Android 如何管理内存<ul>
<li>OOM终结 &amp; 低内存终结</li>
<li>应用内存使用监测</li>
</ul>
</li>
<li>识别内存泄露</li>
<li>最佳实践</li>
</ul>
<hr>
<p><strong>糟糕的用户体验</strong></p>
<ul>
<li>Activity 启动时间过长</li>
<li>应用无反应（ANR）</li>
<li>帧速率差</li>
</ul>
<h4 id="关于帧"><a href="#关于帧" class="headerlink" title="关于帧"></a>关于帧</h4><p><strong>帧速率</strong></p>
<ul>
<li>为了保证能达到60fps，最多只有16ms去处理每一帧</li>
<li>而保证能达到24fps，最多只有41ms去处理每一帧</li>
</ul>
<p><strong>常见操作耗时</strong></p>
<ul>
<li>Binder RPC 调用大约花费 0.12ms</li>
<li>从闪存读取一个字节大约花费 5-25ms</li>
<li>写内容到闪存大约花费 5-100ms</li>
<li>TCP 初始化以及HTTP提取通常花费秒级的时间</li>
</ul>
<blockquote>
<p>往磁盘写内容的时候，会随着磁盘的剩余空间的较少而导致写速率不断减低</p>
</blockquote>
<p><strong>永远不要做阻塞UI线程的事情，用一个新的线程去做可能会影响UI体验的事情</strong></p>
<p>四种可以异步的实现：</p>
<ol>
<li>Runnable</li>
<li>Thread</li>
<li>Future</li>
<li>ExecutorService</li>
</ol>
<ul>
<li>使用Thread</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// do some heavy work</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<ul>
<li>使用内置AsyncTask</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AsyncTask&lt;URL, Integer, Integer&gt;() &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">Long</span> doInBackground(URL... urls) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">count</span> = urls.length;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">count</span>; i++ ) &#123;</span><br><span class="line">        Downloader.download(url);</span><br><span class="line">        publishProgress(i);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> onProgressUpdate(Integer... progress) &#123;</span><br><span class="line">  	setProgress(progress[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> onPostExecute(Integer result) &#123;</span><br><span class="line">  	showDialog(“Downloaded “ + result + “ files”);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用HandlerThread</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">HandlerThread mHandlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"WorkerThread"</span>);</span><br><span class="line">Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler(mHandlerThread.getLooper()) &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">      <span class="keyword">case</span> JOB_1:</span><br><span class="line">      	// do job #1</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> JOB_2:</span><br><span class="line">      	// do job #2</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">handler</span>.sendEmptyMessage(JOB_1);</span><br><span class="line"><span class="keyword">handler</span>.sendEmptyMessage(JOB_2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">handler</span>.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// do more work</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mHandlerThread.quit();</span><br><span class="line">  <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用AsyncQueryHandler</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AsyncQueryHandler(getContentResolver()) &#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> onQueryComplete(<span class="built_in">int</span> token, <span class="keyword">Object</span> cookie,</span><br><span class="line">    Cursor <span class="built_in">cursor</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (token == <span class="number">0</span>) &#123;</span><br><span class="line">      	<span class="comment">// get data from cursor</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;.startQuery(<span class="number">0</span>, <span class="comment">// token</span></span><br><span class="line">        <span class="keyword">null</span>, <span class="comment">// cookie</span></span><br><span class="line">        RawContacts.CONTENT_URI, <span class="keyword">null</span>, <span class="comment">// projection</span></span><br><span class="line">        RawContacts.CONTACT_ID + <span class="string">"&lt;?"</span>, <span class="comment">// selection</span></span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">String</span>[] &#123; <span class="string">"888"</span> &#125;, <span class="comment">// selectionArgs</span></span><br><span class="line">        RawContacts.DISPLAY_NAME_PRIMARY + <span class="string">" ASC"</span> <span class="comment">// orderby</span></span><br><span class="line">		);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用IntentService</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WorkerService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line">  public <span class="type">WorkerService</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"WorkerThread"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> void onHandleIntent(<span class="type">Intent</span> intent) &#123;</span><br><span class="line">    <span class="type">String</span> action = intent.getAction();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"com.test.DO_JOB_1"</span>.equals(action)) &#123;</span><br><span class="line">    	<span class="comment">// do job #1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">startService(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="string">"com.test.DO_JOB_1"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="UI线程性能总结"><a href="#UI线程性能总结" class="headerlink" title="UI线程性能总结"></a>UI线程性能总结</h2><ul>
<li>Activity or Fragment<ul>
<li>AsyncTask</li>
<li>Handler,HandlerThread</li>
<li>AsyncTaskLoader</li>
</ul>
</li>
<li>ContentProvider<ul>
<li>AsyncQueryHandler</li>
<li>CursorLoader</li>
</ul>
</li>
<li>Service<ul>
<li>IntentService</li>
<li>Parcel.writeStrongBinder(IBinder binder)</li>
</ul>
</li>
</ul>
<h2 id="View-Hierarchy"><a href="#View-Hierarchy" class="headerlink" title="View Hierarchy"></a>View Hierarchy</h2><ul>
<li>Measure</li>
<li>Layout</li>
<li>Draw</li>
</ul>
<ul>
<li>Key Events</li>
<li>Trackball Events</li>
<li>Touch Evnets</li>
</ul>
<p><strong>Tips:</strong></p>
<ul>
<li><p>降低布局层次结构的复杂性</p>
</li>
<li><p>使用层次结构查看器来检查是否存在瓶颈</p>
</li>
<li><p>使用RelativeLayout或者GridLayout来简化复杂布局的层次嵌套</p>
</li>
<li><p>使用<strong><merge></merge></strong>标签来较少布局层次</p>
</li>
<li><p>使用<strong><viewstub></viewstub></strong>标签来延迟该标签下的布局的渲染</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ViewStub</span><br><span class="line"><span class="symbol">android:</span>id=<span class="string">"@+id/stub_import"</span></span><br><span class="line"><span class="symbol">android:</span>inflatedId=<span class="string">"@+id/panel_import"</span></span><br><span class="line"><span class="symbol">android:</span>layout=<span class="string">"@layout/progress_overlay"</span></span><br><span class="line"><span class="symbol">android:</span>layout_width=<span class="string">"fill_parent"</span></span><br><span class="line"><span class="symbol">android:</span>layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="symbol">android:</span>layout_gravity=<span class="string">"bottom"</span> /&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub)</span><br><span class="line">findViewById(<span class="keyword">R</span>.id.stub_import)).setVisibility(<span class="keyword">View</span>.VISIBLE)<span class="comment">;</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">View</span> importPanel = ((ViewStub)</span><br><span class="line">findViewById(<span class="keyword">R</span>.id.stub_import)).inflate()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用layoutopt检测常见问题</p>
</li>
</ul>
<h2 id="I-O性能优化"><a href="#I-O性能优化" class="headerlink" title="I/O性能优化"></a>I/O性能优化</h2><ul>
<li><p>异步写SharedPreferences</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences<span class="selector-class">.Editor</span><span class="selector-class">.apply</span>(); <span class="comment">// 异步</span></span><br><span class="line">SharedPreferences<span class="selector-class">.Editor</span><span class="selector-class">.commit</span>(); <span class="comment">// 同步</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库query查询语句中的 *  替换成具体的列值</p>
</li>
<li><p>使用TraceView配置您的数据库查询</p>
</li>
<li><p>使用LIMIT子句减少选择行</p>
</li>
<li><p>最小化完整窗口时间</p>
</li>
<li><p>使用索引优化数据库查询</p>
</li>
<li><p>预编译常用的SQL语句</p>
</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span>sql = “INSERT INTO table VALUES (?, ?)”<span class="comment">;</span></span><br><span class="line"><span class="symbol">SQLiteStatement</span> <span class="keyword">stmt </span>= mDatabase.compileStatement(sql)<span class="comment">;</span></span><br><span class="line"><span class="symbol">DatabaseUtils.bindObjectToProgram</span>(<span class="keyword">stmt, </span><span class="number">1</span>, <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">DatabaseUtils.bindObjectToProgram</span>(<span class="keyword">stmt, </span><span class="number">2</span>, <span class="number">2</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">stmt.execute();</span><br><span class="line"></span><span class="keyword">stmt.close();</span><br><span class="line"></span></span><br><span class="line">//或者使用 PreparaStatement</span><br></pre></td></tr></table></figure>
<ul>
<li>推迟ContentObserver.onChange（）中的自动重新检查</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getContentResolver().registerContentObserver(uri, <span class="keyword">true</span>,</span><br><span class="line">  <span class="keyword">new</span> ContentObserver(<span class="keyword">new</span> Handler()) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</span><br><span class="line">      mDirty = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="keyword">if</span> (mDirty) &#123;</span><br><span class="line">      <span class="comment">// start query again</span></span><br><span class="line">      mDirty = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>在事务中使用批量操作</p>
<ul>
<li>ContentProviderOperation!</li>
<li>ContentProviderOperation.Builder!</li>
<li>ContentResolver.applyBatch()</li>
</ul>
</li>
<li><p>在一个比较长的事务中允许偶尔的事务提前</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SQLiteDatabase</span><span class="selector-class">.yieldIfContendedSafely</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用事件日志调试</p>
<blockquote>
<p>adb logcat -b events content_query_sample:I <em>:S<br>adb logcat -b events content_update_sample:I </em>:S<br>adb logcat -b events db_sample:I *:S</p>
</blockquote>
</li>
</ul>
<h2 id="滑动性能优化（List）"><a href="#滑动性能优化（List）" class="headerlink" title="滑动性能优化（List）"></a>滑动性能优化（List）</h2><ul>
<li><p>ListView : 通过复用view来避免不必要的inflate操作</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">  	convertView = mInflater.inflate(R.layout.main, parent, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过ViewHolder缓存v试图，而避免不必要的findViewByI’d</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> View <span class="title">getView</span>(<span class="params"><span class="keyword">int</span> position, View convertView, ViewGroup parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">    convertView = mInflater.inflate(R.layout.main, parent, <span class="literal">false</span>);</span><br><span class="line">    ViewHolder holder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">    holder.img = (ImageView) convertView.findViewById(R.id.image);</span><br><span class="line">    holder.txt = (TextView) convertView.findViewById(R.id.text);</span><br><span class="line">    convertView.setTag(holder);</span><br><span class="line">  &#125;</span><br><span class="line">  ViewHolder holder = (ViewHolder) convertView.getTag();</span><br><span class="line">  holder.img.setImageResource(R.drawable.icon);</span><br><span class="line">  holder.txt.setText(R.<span class="keyword">string</span>.hello);</span><br><span class="line">  <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ViewHolder</span> &#123;</span><br><span class="line">  ImageView img;</span><br><span class="line">  TextView txt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免view的不必要绘制（例如背景的重复绘制）</p>
<blockquote>
<p>Android 中 会绘制每一个父view即使它被覆盖在一个不透明的子view之下</p>
<p>当你有一个父view并且是永远不可见的，那么不要绘制它（包括他的背景）</p>
</blockquote>
</li>
<li><p>大多数的情况下你不需要绘制window的背景</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity中</span></span><br><span class="line">getWindow().setBackgroundDrawable(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//style中</span></span><br><span class="line"><span class="string">android:</span>windowBackground=<span class="string">"@null"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>避免在运行时进行图片缩放（特殊业务需求除外）</p>
</li>
<li><p>避免在视图（ListView等）滚动的时候进行动画，如果业务要求使用动画，那么请关闭绘制缓存</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListView.setDrawableCacheEnabled(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Allocation Tracker（内存分配追踪器）检测并避免频繁的垃圾回收</p>
</li>
<li><p>考虑使用Object Pool  ，StringBuilder等封装类型</p>
</li>
<li><p>缓存的时候考虑使用SoftReference</p>
</li>
<li><p>在调试模式的时候启用StrictMode(可以检查大部分不规范，不安全操作)</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onCreate</span>() &#123;</span><br><span class="line">  <span class="selector-tag">if</span> (DEVELOPER_MODE) &#123;</span><br><span class="line">        StrictMode<span class="selector-class">.setThreadPolicy</span>(new StrictMode.ThreadPolicy.Builder()</span><br><span class="line">        	.detectDiskReads()</span><br><span class="line">        	.detectDiskWrites()</span><br><span class="line">        	.detectNetwork()</span><br><span class="line">        	.penaltyLog()</span><br><span class="line">        	.build());</span><br><span class="line">        StrictMode<span class="selector-class">.setVmPolicy</span>(new StrictMode.VmPolicy.Builder()</span><br><span class="line">        	.detectLeakedSqlLiteObjects()</span><br><span class="line">        	.detectLeakedClosableObjects()</span><br><span class="line">        	.penaltyLog()</span><br><span class="line">        	.penaltyDeath()</span><br><span class="line">        	.build());</span><br><span class="line">    &#125;</span><br><span class="line">  super<span class="selector-class">.onCreate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查主线程Looper是否有不必要的活动</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Looper<span class="selector-class">.setMessageLogging</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><blockquote>
<p>在系统级别，Android使用低内存驱动程序运行修改过的OOM Killer</p>
</blockquote>
<p>包括：</p>
<ul>
<li>Linux OOM killer</li>
<li>OOM_ADJ</li>
<li>Android Low Memory Killer</li>
</ul>
<p><strong>Android中的低内存阈值(init.rc中)</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Define</span> <span class="selector-tag">the</span> <span class="selector-tag">memory</span> <span class="selector-tag">thresholds</span> <span class="selector-tag">at</span> <span class="selector-tag">which</span> <span class="selector-tag">the</span> <span class="selector-tag">above</span> <span class="selector-tag">process</span> <span class="selector-tag">classes</span> <span class="selector-tag">will</span></span><br><span class="line"># <span class="selector-tag">be</span> <span class="selector-tag">killed</span>. <span class="selector-tag">These</span> <span class="selector-tag">numbers</span> <span class="selector-tag">are</span> <span class="selector-tag">in</span> <span class="selector-tag">pages</span> (4<span class="selector-tag">k</span>).</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.FOREGROUND_APP_MEM</span> 2048</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.VISIBLE_APP_MEM</span> 3072</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.PERCEPTIBLE_APP_MEM</span> 4096</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HEAVY_WEIGHT_APP_MEM</span> 4096</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.SECONDARY_SERVER_MEM</span> 6144</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.BACKUP_APP_MEM</span> 6144</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HOME_APP_MEM</span> 6144</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HIDDEN_APP_MEM</span> 7168</span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.EMPTY_APP_MEM</span> 8192</span><br></pre></td></tr></table></figure>
<p><strong>OOM_ADJ基于重要性级别(init.rc中)</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Define</span> <span class="selector-tag">the</span> <span class="selector-tag">oom_adj</span> <span class="selector-tag">values</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">classes</span> <span class="selector-tag">of</span> <span class="selector-tag">processes</span> <span class="selector-tag">that</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> </span><br><span class="line"># <span class="selector-tag">killed</span> <span class="selector-tag">by</span> <span class="selector-tag">the</span> <span class="selector-tag">kernel</span>. <span class="selector-tag">These</span> <span class="selector-tag">are</span> <span class="selector-tag">used</span> <span class="selector-tag">in</span> <span class="selector-tag">ActivityManagerService</span>. </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.FOREGROUND_APP_ADJ</span> 0 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.VISIBLE_APP_ADJ</span> 1 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.PERCEPTIBLE_APP_ADJ</span> 2 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HEAVY_WEIGHT_APP_ADJ</span> 3 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.SECONDARY_SERVER_ADJ</span> 4 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.BACKUP_APP_ADJ</span> 5 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HOME_APP_ADJ</span> 6 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.HIDDEN_APP_MIN_ADJ</span> 7 </span><br><span class="line"><span class="selector-tag">setprop</span> <span class="selector-tag">ro</span><span class="selector-class">.EMPTY_APP_ADJ</span> 15</span><br></pre></td></tr></table></figure>
<p><strong>进程重要性级别</strong></p>
<ul>
<li>Persistent(持续存在)<ul>
<li>OOM_ADJ &lt; 0</li>
<li>system_server (-16)  , com.android.phone (-12)</li>
</ul>
</li>
<li>Foreground(前台进程)<ul>
<li>FOREGROUND_APP_ADJ = 0</li>
<li>运行前台Activity</li>
<li>运行一个Service，执行onCreate（），onStartCommand（），onDestroy（）</li>
<li>托管由前台Activity或前台进程绑定的Service</li>
<li>运行一个BroadcastReceiver，执行onReceive（）</li>
<li>托管由持续或前台进程使用的ContentProvider</li>
</ul>
</li>
<li>Visible（可见进程）<ul>
<li>VISIBLE_APP_ADJ = 1</li>
<li>运行可见的Activity（不在前台，也就是，不是正在和用户交互的）</li>
<li>运行由startService()启动的Service，Service使用startForeground()<br>使自己处于前台状态</li>
</ul>
</li>
<li>Service(服务进程)<ul>
<li>SECONDARY_SERVER_ADJ = 4</li>
<li>运行由startService()启动Service，并且不是可见进程</li>
</ul>
</li>
<li>Background(后台进程)<ul>
<li>HIDDEN_APP_MIN_ADJ (7) .. EMPTY_APP_ADJ (15)</li>
<li>不包含任何活动应用程序组件的进程</li>
</ul>
</li>
</ul>
<p><strong>Low Memory 回调</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Activity</span><span class="selector-class">.onLowMemory</span>()</span><br><span class="line"><span class="selector-tag">Fragment</span><span class="selector-class">.onLowMemory</span>()</span><br><span class="line"><span class="selector-tag">Activity</span><span class="selector-class">.onSaveInstanceState</span>(<span class="selector-tag">Bundle</span>)</span><br><span class="line"><span class="selector-tag">Service</span><span class="selector-class">.onLowMemory</span>()</span><br><span class="line"><span class="selector-tag">ContentProvider</span><span class="selector-class">.onLowMemory</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在应用程序级别，Android限制了多少内存可以分配给每个应用程序。</p>
<p>Android为每个应用程序定义了一个堆限制,并指示何时抛出OutOfMemoryError</p>
</blockquote>
<p>Android Studio 中 Heap窗口中的相关术语</p>
<table>
<thead>
<tr>
<th style="text-align:center">术语</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Heap limit</td>
<td style="text-align:center">应用在Dalvik堆中的最大允许占用空间</td>
</tr>
<tr>
<td style="text-align:center">Heap size</td>
<td style="text-align:center">当前Dalvik堆的大小</td>
</tr>
<tr>
<td style="text-align:center">Allocated</td>
<td style="text-align:center">应用在Dalvik堆上分配的字节总数</td>
</tr>
<tr>
<td style="text-align:center">Free</td>
<td style="text-align:center">Heap size – Allocated</td>
</tr>
<tr>
<td style="text-align:center">% Used</td>
<td style="text-align:center">Allocated / Heap size * 100%</td>
</tr>
<tr>
<td style="text-align:center">External allocation (3.0之前)</td>
<td style="text-align:center">Bitmap byte[]</td>
</tr>
</tbody>
</table>
<p>ActivityManager.getMemoryClass() 可以查看当前应用Heap size limit</p>
<p><strong>OOM 发生的情形</strong></p>
<ul>
<li>3.0之前</li>
</ul>
<p>Heap size + external allocation + new allocation request &gt;= Heap limit</p>
<ul>
<li><p>3.0（包括）之后</p>
<p>Heap size + new allocation request &gt;= Heap limit</p>
</li>
</ul>
<blockquote>
<p>new allocation request : 新的内存开辟请求大小</p>
</blockquote>
<p><strong>不代表进程内存使用的情形</strong></p>
<ul>
<li>每个进程从zygote fork出来后，都会有2mb以上的开销</li>
<li>在使用native的时候会开辟更多的内存：<ul>
<li>Android应用程序运行在Dalvik VM中，同时通过JNI加载本地库</li>
<li>由应用程序调用的Dalvik级API可以代表申请人使用本机库。</li>
</ul>
</li>
<li>如果你启用了硬件加速（4.0中默认开启），那么会多有8mb的内存去使用OpenGL</li>
</ul>
<h4 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h4><ul>
<li>根据进程内存使用情况排序：</li>
</ul>
<p>adb shell procrank -p</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PID Vss Rss Pss Uss cmdline!</span><br><span class="line"><span class="number">3156</span> <span class="number">80272</span><span class="keyword">K</span> <span class="number">80220</span><span class="keyword">K</span> <span class="number">59228</span><span class="keyword">K</span> <span class="number">57624</span><span class="keyword">K</span> com.htc.launcher</span><br><span class="line"><span class="number">1455</span> <span class="number">94540</span><span class="keyword">K</span> <span class="number">58728</span><span class="keyword">K</span> <span class="number">37488</span><span class="keyword">K</span> <span class="number">36060</span><span class="keyword">K</span> system_server</span><br><span class="line"><span class="number">9000</span> <span class="number">55224</span><span class="keyword">K</span> <span class="number">55200</span><span class="keyword">K</span> <span class="number">33900</span><span class="keyword">K</span> <span class="number">32412</span><span class="keyword">K</span> com.roguso.plurk</span><br><span class="line"><span class="number">6713</span> <span class="number">47912</span><span class="keyword">K</span> <span class="number">47880</span><span class="keyword">K</span> <span class="number">27719</span><span class="keyword">K</span> <span class="number">26788</span><span class="keyword">K</span> tw.anddev.aplurk</span><br><span class="line"><span class="number">1624</span> <span class="number">44804</span><span class="keyword">K</span> <span class="number">44760</span><span class="keyword">K</span> <span class="number">24954</span><span class="keyword">K</span> <span class="number">24200</span><span class="keyword">K</span> android.process.acore</span><br><span class="line"><span class="number">2081</span> <span class="number">44992</span><span class="keyword">K</span> <span class="number">44960</span><span class="keyword">K</span> <span class="number">23205</span><span class="keyword">K</span> <span class="number">21628</span><span class="keyword">K</span> com.htc.android.mail</span><br><span class="line"><span class="number">1604</span> <span class="number">41288</span><span class="keyword">K</span> <span class="number">41248</span><span class="keyword">K</span> <span class="number">22393</span><span class="keyword">K</span> <span class="number">21752</span><span class="keyword">K</span> com.htc.android.htcime</span><br><span class="line"><span class="number">1594</span> <span class="number">40912</span><span class="keyword">K</span> <span class="number">40844</span><span class="keyword">K</span> <span class="number">21588</span><span class="keyword">K</span> <span class="number">20284</span><span class="keyword">K</span> com.htc.weatheridlescreen</span><br><span class="line"><span class="number">1622</span> <span class="number">39904</span><span class="keyword">K</span> <span class="number">39872</span><span class="keyword">K</span> <span class="number">21297</span><span class="keyword">K</span> <span class="number">20696</span><span class="keyword">K</span> com.android.phone</span><br></pre></td></tr></table></figure>
<p>VSS（Virtual Set Size）：进程可以访问的页面总数</p>
<p>RSS（Resident Set Size）: RAM中进程可以访问的页总数</p>
<p>PSS（Proportion Set Size）：进程在RAM中使用的页面总数，其中每个页面的大小是页面总数除以共享它的进程数</p>
<p>USS（Unique Set Size）：进程可以访问的非共享页面的数量</p>
<ul>
<li><p>列出进程的虚拟内存区域</p>
<p> adb shell procmem -p <pid></pid></p>
</li>
</ul>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vss Rss Pss Uss ShCl ShDi PrCl PrDi Name</span><br><span class="line">------- ------- ------- ------- ------- ------- ------- ------- </span><br><span class="line"><span class="number">4</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> /system/bin/app_process</span><br><span class="line"><span class="number">4</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> /system/bin/app_process</span><br><span class="line"><span class="number">13908</span><span class="keyword">K</span> <span class="number">13908</span><span class="keyword">K</span> <span class="number">11571</span><span class="keyword">K</span> <span class="number">11508</span><span class="keyword">K</span> <span class="number">2400</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">11508</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> [heap]</span><br><span class="line"><span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> [heap]</span><br><span class="line"><span class="number">4</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">4</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> [heap]</span><br><span class="line"><span class="number">36</span><span class="keyword">K</span> <span class="number">36</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">36</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> <span class="number">0</span><span class="keyword">K</span> /dev/__properties__</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
<p>adb shell dumpsys meminfo <pid></pid></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Applications Memory Usage (kB):</span><br><span class="line">Uptime: <span class="number">89133197</span> Realtime: <span class="number">106110266</span></span><br><span class="line"></span><br><span class="line">** MEMINFO in pid <span class="number">11961</span> [com.htc.friendstream] **</span><br><span class="line">				native dalvik other total limit bitmap nativeBmp</span><br><span class="line">		  size: <span class="number">15032</span>  <span class="number">8535</span>   N/<span class="keyword">A</span>   <span class="number">23567 32768</span> N/<span class="keyword">A</span>    N/<span class="keyword">A</span></span><br><span class="line">	 allocated: <span class="number">14565</span>  <span class="number">5697</span>   N/<span class="keyword">A</span>   <span class="number">20262</span> N/<span class="keyword">A</span>   <span class="number">4669</span>   <span class="number">1918</span></span><br><span class="line">		  free: <span class="number">162</span>    <span class="number">2838</span>   N/<span class="keyword">A</span>   <span class="number">3000</span>  N/<span class="keyword">A</span>   N/<span class="keyword">A</span>    N/<span class="keyword">A</span></span><br><span class="line">		 (Pss): <span class="number">4105</span>   <span class="number">2550</span>   <span class="number">13952 20607</span> N/<span class="keyword">A</span>   N/<span class="keyword">A</span>    N/<span class="keyword">A</span></span><br><span class="line">(shared dirty): <span class="number">2440</span>   <span class="number">1928</span>   <span class="number">5532</span>  <span class="number">9900</span>  N/<span class="keyword">A</span>   N/<span class="keyword">A</span>    N/<span class="keyword">A</span></span><br><span class="line">  (priv dirty): <span class="number">4044</span>   <span class="number">708</span>    <span class="number">12716 17468</span> N/<span class="keyword">A</span>   N/<span class="keyword">A</span>    N/<span class="keyword">A</span></span><br><span class="line"></span><br><span class="line">Objects</span><br><span class="line">		   Views: <span class="number">0</span> ViewRoots: <span class="number">0</span></span><br><span class="line">     AppContexts: <span class="number">0</span> Activities: <span class="number">0</span></span><br><span class="line">	 	  Assets: <span class="number">7</span> AssetManagers: <span class="number">7</span></span><br><span class="line">   Local Binders: <span class="number">11</span> Proxy Binders: <span class="number">15</span></span><br><span class="line">Death Recipients: <span class="number">1</span></span><br><span class="line"> OpenSSL Sockets: <span class="number">0</span>!</span><br></pre></td></tr></table></figure>
<p><strong>Private Dirty = USS</strong></p>
<p>无法分页到磁盘并且不与任何其他进程共享的进程内部RAM量</p>
<p>当进程消失时，系统可以使用的RAM</p>
<ul>
<li>一些重要的虚拟内存区域</li>
</ul>
<p>/dev/ashmem/dalvik-heap : 在Dalvik级别为堆分配的匿名页面</p>
<p>[heap], [anonymous] : 由malloc（）在本机级别分配的匿名页面</p>
<p>/system/framework/*.odex (release build)</p>
<p>/data/dalvik-cache/*.odex (debug build) : 文件支持的mmap页面</p>
<h3 id="Garbage-collection-垃圾收集"><a href="#Garbage-collection-垃圾收集" class="headerlink" title="Garbage collection(垃圾收集)"></a>Garbage collection(垃圾收集)</h3><ul>
<li><ol>
<li>0之前的GC:</li>
</ol>
<p>收集垃圾的时候会停止其他所有的工作</p>
<p>对整个堆进行收集</p>
<p>造成的暂停时间一般都大于100ms</p>
</li>
<li><p>3.0及其之后</p>
<p>不会暂停其他工作，而是与其他工作同时进行（绝大部分是这样的）</p>
<p>一次垃圾收集只是对堆的一部分而已</p>
<p>造成的暂停时间一般小于5ms</p>
</li>
</ul>
<h3 id="Memory-leaks-内存泄露"><a href="#Memory-leaks-内存泄露" class="headerlink" title="Memory leaks(内存泄露)"></a>Memory leaks(内存泄露)</h3><ul>
<li>GC并不能避免内存泄露</li>
<li>有一个指向长期存在的且未使用的对象的应用，导致这个不被使用的对象不能被回收</li>
<li>在Android中，通常发生内存泄露的是对Context或者Activity的引用</li>
</ul>
<p><strong>常见的因为Context 或着 Activity造成的内存泄露</strong></p>
<ol>
<li><p>在Activity中存在长期存在的指向非静态内部类实例对象的引用</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">  static <span class="type">LeakyTest</span> leaky = <span class="literal">null</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LeakyTest</span></span>&#123;</span><br><span class="line">    void doSoming()&#123;</span><br><span class="line">      <span class="comment">//doing</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> saveInstanceStates)&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(saveInstanceStates);</span><br><span class="line">    <span class="keyword">if</span>(leaky==<span class="literal">null</span>)</span><br><span class="line">      leaky = <span class="keyword">new</span> <span class="type">LeakyTest</span>();</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Activity中有超出Activity生命周期且长期存活的线程</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line"> <span class="keyword"> public</span> void run()&#123;</span><br><span class="line">    //do<span class="built_in"> long-live </span>works</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>有用的方法</strong></p>
<ul>
<li>使用logcat检查是否有内存随着时间的推移而不断增加（尤其注意某些方法的执行步骤！）</li>
</ul>
<p>例如得到的日志信息：</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">D</span>/dalvikvm(<span class="number">9050</span>):GC_CONCURRENT free <span class="number">2049</span><span class="keyword">k</span>, <span class="number">65</span>% free  <span class="number">3571</span><span class="keyword">k</span>/<span class="number">9991</span><span class="keyword">k</span>, external <span class="number">4703</span><span class="keyword">k</span>/<span class="number">5261</span><span class="keyword">k</span>, paused <span class="number">2</span>ms+<span class="number">2</span>ms</span><br></pre></td></tr></table></figure>
<p>D/dalvikvm(9050): <u>GC_CONCURRENT</u> free 2049k, 65% free  3571k/9991k, external 4703k/5261k, paused 2ms+2ms</p>
<p>下划线处GC的原因：</p>
<p>GC_CONCURRENT</p>
<p>GC_FOR_MALLOC</p>
<p>GC_EXTERNAL_ALLOC</p>
<p>GC_HPROF_DUMP_HEAP</p>
<p>GC_EXPLICIT</p>
<p>D/dalvikvm(9050): GC_CONCURRENT <u>free 2049k</u>, 65% free  3571k/9991k, external 4703k/5261k, paused 2ms+2ms</p>
<p>下划线处GC的原因：</p>
<p>内存释放</p>
<p>D/dalvikvm(9050): GC_CONCURRENT free 2049k, <u>65% free  3571k/9991k</u>, external 4703k/5261k, paused 2ms+2ms</p>
<p>下划线处GC的原因：</p>
<p>内存释放</p>
<p>堆进行信息统计</p>
<p>D/dalvikvm(9050): GC_CONCURRENT free 2049k, 65% free  3571k/9991k, <u>external 4703k/5261k,</u> paused 2ms+2ms</p>
<p>下划线处GC的原因：</p>
<p>内存释放</p>
<p>堆进行信息统计</p>
<p>内部内存进行信息统计</p>
<p>D/dalvikvm(9050): GC_CONCURRENT free 2049k, 65% free  3571k/9991k, external 4703k/5261k, <u>paused 2ms+2ms</u></p>
<p>下划线处GC的原因：</p>
<p>内存释放</p>
<p>堆进行信息统计</p>
<p>内部内存进行信息统计</p>
<p>时间暂停</p>
<ul>
<li>使用分配跟踪器查看是否有随着时间分配未预料的对象（Android Studio中的logcat窗口中有对应的按钮）</li>
<li>使用（Histogram view）直方图视图查看活动实例的数量。 有多于一个Activity的一个实例，那么这是一个强烈的Activity / Context泄露的迹象。</li>
<li>按保留大小排序的Dominator Tree视图有助于识别保留了大量的内存且不能被释放的对象。 他们通常是找到内存泄漏的好起点。</li>
</ul>
<p><strong>强烈推荐郭神关于内存泄露分析的文章：</strong></p>
<p> <a href="http://blog.csdn.net/sinyu890807/article/details/42238633" target="_blank" rel="external">Android最佳性能实践(二)——分析内存的使用情况</a></p>
<h2 id="其他优化建议"><a href="#其他优化建议" class="headerlink" title="其他优化建议"></a>其他优化建议</h2><ul>
<li><p>造成OutOfMemoryError的原因通常是Bitmap或者对象进行了太多的内存分配</p>
<p>加载图片的时候尽可能不要加载原尺寸的大图，可以使用缩略图</p>
<p>回收已经不使用的Bitmap资源bitmap.recycle().</p>
<blockquote>
<p>2.3（包括）之前，Bitmap的引用是放在堆中的，而Bitmap的数据部分是放在栈中的，需要用户调用recycle方法手动进行内存回收 ，2.3之后，整个Bitmap，包括数据和引用，都放在了堆中，这样，整个Bitmap的回收就全部交给GC了，这个recycle方法就再也不需要使用了。</p>
</blockquote>
<p>列表中加载图片注意使用小图，以及做好缓存工作</p>
<p>尽可能的避免碎片化</p>
<p>减少在应用堆空间堆快满的时候再堆分配</p>
<p>缓存中使用SoftReference</p>
<p>使用WeakReference避免堆存泄露</p>
</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩放图片</span></span><br><span class="line">BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">opts.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">BitmapFactory.decodeFile(path, opts);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> originalWidth = opts.outWidth;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> originalHeight = opts.outHeight;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> originalDim = Math.max(originalWidth, originalHeight);</span><br><span class="line">opts = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">opts.inSampleSize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ( originalDim &gt; MAX_IMAGE_DIM ) &#123;</span><br><span class="line">  opts.inSampleSize *= <span class="number">2</span>;</span><br><span class="line">  originalDim /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">return</span> BitmapFactory.<span class="title">decodeFile</span><span class="params">(path, opts)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比之间的例子，这里改成了静态内部类</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  static <span class="type">Leaky</span> leak = <span class="literal">null</span>;</span><br><span class="line">  static <span class="class"><span class="keyword">class</span> <span class="title">Leaky</span> </span>&#123;</span><br><span class="line">    void doSomething() &#123;</span><br><span class="line">        <span class="comment">//doing</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">  	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">if</span> (leak == <span class="literal">null</span>) &#123;</span><br><span class="line">      leak = <span class="keyword">new</span> <span class="type">Leaky</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Leaky leak = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaky</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Context mContext; <span class="comment">//final修饰</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Leaky</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    mContext = context;</span><br><span class="line">    doSomethingWithOuterInstance();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSomethingWithOuterInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String text = mContext.getString(R.string.hello);</span><br><span class="line">    System.out.println(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  <span class="keyword">if</span> (leak == <span class="keyword">null</span>) &#123;</span><br><span class="line">      leak = <span class="keyword">new</span> Leaky(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Leaky leak = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaky</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Context&gt; mContext;<span class="comment">//使用了弱引用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leaky</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  mContext = <span class="keyword">new</span> WeakReference&lt;Context&gt;(context);</span><br><span class="line">  doSomethingWithOuterInstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomethingWithOuterInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Context context = mContext.get();</span><br><span class="line">  <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String text = context.getString(R.string.hello);</span><br><span class="line">    System.out.println(text);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  <span class="keyword">if</span> (leak == <span class="keyword">null</span>) &#123;</span><br><span class="line">  	leak = <span class="keyword">new</span> Leaky(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多优化建议，请移步郭神博客</p>
<p><a href="http://blog.csdn.net/sinyu890807/article/details/42238627" target="_blank" rel="external">Android最佳性能实践</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再温排序]]></title>
      <url>dooogo.github.io/2016/10/13/%E5%86%8D%E6%B8%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="先来个总览，知其庞然大体，而入之其微，后而一窝端"><a href="#先来个总览，知其庞然大体，而入之其微，后而一窝端" class="headerlink" title="先来个总览，知其庞然大体，而入之其微，后而一窝端"></a>先来个总览，知其庞然大体，而入之其微，后而一窝端</h3><p><strong>需要先知道的几个概念：</strong></p>
<ul>
<li><p>稳定排序：在待排序的文件中，若存在若干个相同关键字的记录，经过排序后这些具有相同关键字的记录相对顺序不改变。</p>
</li>
<li><p>不稳定排序：与稳定排序相反</p>
</li>
<li><p>内部排序：待排序的记录存放在计算机随机存储器（RAM）中进行排序的过程</p>
</li>
<li><p>外部排序：待排序记录的数量很大，以至于内存不能容纳完全部的记录，需要在排序过程中对外存进行访问的排序（也就是说涉及到了内外存交换）</p>
<p>​</p>
</li>
</ul>
<p><strong>排序算法性能评价</strong></p>
<ol>
<li>执行时间和所需辅助空间</li>
<li>算法本身的复杂度</li>
</ol>
<p>空间复杂度：所需辅助空间不依赖于排序问题的规模n，则辅助空间为O(1),称之为就地排序。而非就地排序的辅助空间一般为O(n);</p>
<p>时间复杂度：大多数排序算法的时间开销主要是关键字的比较与移动。</p>
<h3 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h3><table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">平均，最差都是O(n^2),最好O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">双向冒泡排序</td>
<td style="text-align:center">平均，最差都是O(n^2),最好O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">插入排序</td>
<td style="text-align:center">平均，最差都是O(n^2),最好O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">最差，最差，平均都是O(nlogn)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">桶排序</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(k)</td>
</tr>
<tr>
<td style="text-align:center">基数排序</td>
<td style="text-align:center">O(dn)  (d是常数)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">二叉树排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">图书馆排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">(1+x)n</td>
</tr>
</tbody>
</table>
<h3 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h3><table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">最差，平均都是O(n^2)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">希尔排序</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">最差，最好，平均都是O(nlogn)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">平均O(nlogn),最坏O(n^2)</td>
<td style="text-align:center">O(logn)</td>
</tr>
</tbody>
</table>
<p>内部排序：冒泡排序，插入排序，选择排序，快速排序，堆排序，基数排序</p>
<p>外部排序：归并排序，桶排序，基数排序</p>
<p>一些实践总结：</p>
<p>简单排序中直接插入最好，快速排序最快，待排序记录为正序的时候直接插入和猫婆都最佳</p>
<p>n&lt;=50的时候，可以直接插入或者选排序，记录规模小的时候，直接插入比较好，否则因为直接选择移动的记录次数少于直接插入，则选择 选择排序较好。</p>
<p>待排序记录基本有序的情况下，选用直接插入，冒泡，随机快速排序较好。</p>
<p>若n的规模较大的时候，采用事假复杂度为 O(nlogn)的排序算法较好：快速排序，归并排序，堆排序。</p>
<h3 id="冒泡排序（稳定）"><a href="#冒泡排序（稳定）" class="headerlink" title="冒泡排序（稳定）"></a>冒泡排序（稳定）</h3><p>思想：以正序为例，每一趟排序比较都将未排序部分的最小元素移动交换到未排序部分的第一位。</p>
<p>经过优化的冒泡排序，在最好情况下，也就是进行第一次冒泡即可的情况（已有正序），而且第一次冒泡肯定是n次比较交换，无法避免。</p>
<p>最坏情况是逆序的情况比较交换次数是：1+2+…+n-1+n = n +(n^2-n)/2 = (1+n)*n/2=O(n^2)</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;a.length;i++)&#123; <span class="comment">//冒泡次数</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = a.length<span class="number">-1</span>;j&gt;i;j--)&#123; <span class="comment">//从底往上冒泡的过程</span></span><br><span class="line">			<span class="keyword">if</span>(a[j] &lt; a[j<span class="number">-1</span>]) <span class="comment">// 比前一个小则上冒，等于的时候不做出来，所以是稳定排序</span></span><br><span class="line">				swap(a,j,j<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">bubbleSortGood</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">//只要一趟冒泡过程没有发生交换，则已有序，直接退出冒泡的循环即可</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">		flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = a.length<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j] &lt; a[j<span class="number">-1</span>])&#123;</span><br><span class="line">				swap(a,j,j<span class="number">-1</span>);</span><br><span class="line">				flag = <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序（不稳定）"><a href="#选择排序（不稳定）" class="headerlink" title="选择排序（不稳定）"></a>选择排序（不稳定）</h3><p>思想：每趟比较交换中将最小的元素交换打动未排序部分的第一位。交换原则是当前记录小于未排序部分的第一位则此两个数交换。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void selectSort<span class="comment">(int a[])</span>&#123;</span><br><span class="line">		for<span class="comment">(int i=0;i&lt;a.length-1;i++)</span>&#123;</span><br><span class="line">			for<span class="comment">(int j= i+1;j&lt;a.length;j++)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span><span class="comment">(a[i]&gt;a[j])</span></span><br><span class="line">					swap<span class="comment">(a,i,j)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子说明为什么会不稳定：</p>
<p>假设待排序序列为：7 , 8 , 9 ，7, 5 , 3 。记a1 =0 第一个7出现的位置，a2=3，第二个7出现的位置。在第一趟选择排序的时候 index = 0-3时均没有交换。index = 4,此时5&lt;7，则交换。交换后序列变成了：5，8 , 9 ，7 , 7 , 3，那么显然的，原来第一个7的位置变成了4，此时与未排序的序列中的同关键字7的相对位置发生了改变。</p>
<p>复杂度同冒泡排序一样分析即可。</p>
<h3 id="插入排序（稳定）"><a href="#插入排序（稳定）" class="headerlink" title="插入排序（稳定）"></a>插入排序（稳定）</h3><p>思想：将未排序部分的第一个记录插入到已排好序的部分之中。想想你玩扑克的场景。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">          <span class="comment">//待排序的元素，从以排好序的部分的后面向前比较，知道第一次遇到小鱼或者等于的元素则停止</span></span><br><span class="line">          <span class="comment">//否则比较一次则交换一次（相当于将插入位置后的元素后移）</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&gt;<span class="number">0</span> &amp;&amp; a[j]&lt;a[j<span class="number">-1</span>];j--)</span><br><span class="line">				swap(a,j,j<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>最坏的情况下，序列已经是降序序列，此时需要进行n(n-1)/2次比较。最好的情况是已经是升序序列，则只需要进行n-1次比较即可。</p>
<h3 id="希尔排序（不稳定）"><a href="#希尔排序（不稳定）" class="headerlink" title="希尔排序（不稳定）"></a>希尔排序（不稳定）</h3><p>思想：先将整个待排序序列分成若干个子序列，分别对每个子序列进行直接插入排序，待每个子序列都有序后，在对整个序列进行一次直接插入排序。其实分割子序列是按照一个“增量”进行分割的，“增量；“增量”的选取会直接影响到算法的性能。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> shellSort(<span class="keyword">int</span> a[])&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">step</span> = a.length/<span class="number">2</span>; <span class="comment">//这里的划分策略是折半划分</span></span><br><span class="line">        <span class="built_in">while</span>(<span class="built_in">step</span>!=<span class="number">0</span>)&#123; <span class="comment">//划分的子序列数减少</span></span><br><span class="line">          <span class="built_in">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="built_in">step</span>;k++)&#123; <span class="comment">//对每个子序列进行直接插入排序</span></span><br><span class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i=k;i&lt;k+<span class="built_in">step</span>;i++)&#123;</span><br><span class="line">              <span class="built_in">for</span>(<span class="keyword">int</span> j=i;j&gt;k &amp;&amp; a[j]&lt;a[j<span class="number">-1</span>];j--)&#123;</span><br><span class="line">                swap(a,j,j<span class="number">-1</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">step</span>=<span class="built_in">step</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<p>对序列：3 , 5 , 33 , 2 , 4 , 6 , 23 , 56 , 23 , 24 , 4 , 54 , 6 进行直接插入排序与希尔排序，执行swap()方法的次数分别是：</p>
<p>直接插入排序：25次</p>
<p>希尔排序：16次</p>
<p>以上只是从单一数据进行说明，并非对每个序列排序都符合以上的交换次数对比关系。</p>
<p>有人大量测试得到希尔排序比较和移动次数大约在：n^1.25 - 1.6* n^1.25</p>
<p><strong>以下分析为什么希尔排序相对直接插入排序有更好的性能。</strong></p>
<ol>
<li>待排序序列基本有序的时候，直接插入排序需要的移动交换次数是均相对少的（相对于冒泡，选择）；</li>
<li>n 值较小的时候 n 与 n^2的差别也较小，所以直接插入排序的最好时间复杂度O(n) 与最坏时间复杂度O(n^2)差别也不大。</li>
<li>希尔排序开始的时候增量较大，那个划分的子序列就较小，所以子序列的直接插入排序较快。而后来增量逐渐较小，划分的子序列数就减少，然而之前的划分中已经是现在的子序列基本有序，所以在新的子序列进行直接插入排序也比较快。</li>
</ol>
<h3 id="快速排序（不稳定）"><a href="#快速排序（不稳定）" class="headerlink" title="快速排序（不稳定）"></a>快速排序（不稳定）</h3><p>基本思想：通过一趟排序将待排序的记录分割成独立的两部分。其中一部分的关键字均比另一部分的记录关键字小，则可以分别继续对这两部分进行排序，已达到整个序列有序的目的。</p>
<p><strong>步骤</strong></p>
<p>一：</p>
<ol>
<li>初始是 l ,h 分别为0，序列的长度</li>
<li>如果l&gt;=h则排序完成，否则进行步骤3</li>
<li>进行步骤二，返回值记为 p。</li>
<li>对序列arr[l … p]重复步骤2</li>
<li>对序列arr[p+1… h]重复步骤2</li>
</ol>
<p>二：</p>
<ol>
<li>从序列中选取一个记录作为轴枢，一般是当前序列的第一个元素作为轴枢。记为 p 。此外low,high分别为序列的起始下标，结束下标。</li>
<li>从结束下标往左进行比较(也就是执行 –high 操作),找到第一个比 p 小的记录，并将该记录设置到 low 位置，也就是执行arr[low] = arr[high]。</li>
<li>从low位置开始向右进行比较（++low）,找到第一个比p大的记录，并将该记录设置到high位置（arr[high] = arr[low]）；</li>
<li>重复步骤2,3,直到low&gt;=high（此时完成的是一次划分序列的操作），返回此时的位置索引low</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">			<span class="keyword">int</span> p = partition(a, low, high);</span><br><span class="line">			quickSort(a, low, p<span class="number">-1</span>);<span class="comment">//递归对轴枢左边的序列进行排序</span></span><br><span class="line">			quickSort(a, p+<span class="number">1</span>, high);<span class="comment">//递归对轴枢右边的序列进行排序</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//可以发现，只需要对子序列递归的排序即可，不需要合并子序列排序的结果</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> t = a[low];</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high)&#123;<span class="comment">//交替从左右两边向中间扫描比较</span></span><br><span class="line">          <span class="comment">//将比轴枢位置小的记录移动到轴枢位置的左边</span></span><br><span class="line">			<span class="keyword">while</span>(low&lt;high &amp;&amp; t&lt;=a[high])</span><br><span class="line">				--high;</span><br><span class="line">			a[low] = a[high];</span><br><span class="line">           <span class="comment">//将比轴枢位置大的记录移动到轴枢位置的右边</span></span><br><span class="line">			<span class="keyword">while</span>(low&lt;high &amp;&amp; t&gt;=a[low])</span><br><span class="line">				++low;</span><br><span class="line">			a[high] = a[low];</span><br><span class="line">		&#125;</span><br><span class="line">		a[low] = t;<span class="comment">//将轴枢位置的值放到正确的位置，一趟排序后应该在的位置</span></span><br><span class="line">		<span class="keyword">return</span> low;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>以上递归实现的快速排序中，因为递归会需要一个额外的栈空间进行维护每个递归。假若每趟排序都将记录分割成接近的两个子序列，那个就是说类似满二叉树的结构，此时栈的最大深度为 log2 n  +1。而加入每趟排序之后，轴枢位置总偏于两端的话，类似只有左子树或者右子树的二叉树，那个栈的最大深度是 n 。经过优化，也就是说每次的到的分割的子序列，先对长度较短的序列进行快速排序，那么栈的最大深度可以降到log n 。</p>
<p>当待排序记录（基本）有序的时候，快排会退化成冒泡排序。</p>
<p>以上方法的快速排序的时间复杂度主要来自partition函数。所以  <strong>T(n) = P(n) +T(k-1) +T(n-k)</strong> 。P(n)是对n个记录进行一趟快排的时间，而且在随机的序列中一趟快速排序之后 k 在 1 ～ n之间的任何一个值的概率相等，那么所需要的平均时间是：T(n) = (n+1)<em>T(n-1)/n+(2n-1)</em>c/n ，c是一个常数。最后得到的是O(nlogn)的数量级。、</p>
<h3 id="堆排序（不稳定）"><a href="#堆排序（不稳定）" class="headerlink" title="堆排序（不稳定）"></a>堆排序（不稳定）</h3><p>要理解堆排序，我们需要先了解什么事堆。</p>
<p>堆：n个元素的序列{k1,k2,k3,…,kn}满足如下的关系：</p>
<p>最小堆：ki&lt;=k(2i)  &amp;&amp; ki&lt;=k(2i+1)</p>
<p>最大堆：ki&gt;=k(2i)  &amp;&amp; ki&gt;=k(2i+1)</p>
<p>i=1~floor(n/2)</p>
<p>一个堆可以对应一个完全二叉树</p>
<p>思想：通过将一个无序的序列构建成一个最大堆或者最小堆，每次从堆顶就可以获取得到当前堆的最大或者最小值，当堆顶无元素的时候则可以得到一个有序的序列了。  </p>
<p>建堆的过程其实就是一个反复调成的过程（保证当前建立好的是一个堆）。如果将这个序列看做是一个完全二叉树的话，那个最后一个非终端结点就是floor（n/2）。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> s,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> t = a[s]; <span class="comment">//先保存当前节点的值</span></span><br><span class="line">		<span class="comment">//从当前节点的左孩子开始寻找,直到没有孩子节点（也就是自己就是叶子节点的时候）</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*s;i&lt;l;i*=<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="comment">//t节点存在右孩子，且右孩子大于左孩子（说明右孩子可能大于t对应的节点，大于就需要调整～）</span></span><br><span class="line">			<span class="comment">//那么令当前节点加一（指向右孩子）</span></span><br><span class="line">			<span class="keyword">if</span>(i&lt;l &amp;&amp; a[i]&lt;a[i+<span class="number">1</span>])</span><br><span class="line">				i++;</span><br><span class="line">			<span class="keyword">if</span>(t&gt;a[i]) <span class="comment">//t对应的节点大于两个孩子节点，所以不用调整直接退出</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//将找到的大于的t节点对应的节点，交换到 s 对应的节点处，同时更新s为当前的i值</span></span><br><span class="line">			<span class="comment">//也就是如果下次还存在交换，那么就是针对最新的s(上次交换的s)</span></span><br><span class="line">			a[s] = a[i];</span><br><span class="line">			s = i;</span><br><span class="line">		&#125;</span><br><span class="line">		a[s] = t; <span class="comment">//t最终被交换到的是s处（上面的for循环直接被break的话，相当于没有交换）</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">		<span class="comment">//从左后一个非终端结点向前，因为如果是叶子节点</span></span><br><span class="line">		<span class="comment">//那么不会存在比自己大的孩子节点了</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = a.length/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			heapAdjust(a, i, a.length);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=a.length<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="comment">//最大堆堆顶是最大的元素</span></span><br><span class="line">			<span class="comment">//那么这里是不断交换到i（i从末尾向前移动）</span></span><br><span class="line">			<span class="comment">//那么最大值就会从最后递减向前排列</span></span><br><span class="line">			swap(a,<span class="number">0</span>,i);</span><br><span class="line">			<span class="comment">//只调整0～i-1的元素，i-1之后的已经有序了</span></span><br><span class="line">			heapAdjust(a, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>由上可见，堆排序的主要耗费时间是在于初始建堆以及反复调整新堆上，而对于深度为k的堆，调整算法中进行关键字比较的次数最多为2(k-1)次。，所以在建立n个元素，深度为h的堆的时候，总共进行的关键字比较次数不超过4n。而堆的深度为floor(log2 n )+1。新堆调整次数为n-1次，则总共进行的比较次数不超过：</p>
<p>2（floor(log2 (n-1)) + floor(log2 (n-1)) +… + floor(log2 2)）&lt; 2nlog2 n</p>
<p>所以时间复杂度是：<strong>O(nlogn)</strong></p>
<p>空间复杂度：<strong>O(1)</strong></p>
<p>因为只有一个保存临时节点信息的变量。</p>
<h3 id="归并排序（稳定）"><a href="#归并排序（稳定）" class="headerlink" title="归并排序（稳定）"></a>归并排序（稳定）</h3><p>思想：将两个已经排好序的序列合并成一个有序序列。</p>
<p>步骤：</p>
<ol>
<li>将相邻两个记录进行归并操作，得到floor（n/2）个子序列，排序后每个序列包含两个记录。</li>
<li>将上诉序列再次进行归并操作，将形成floor(n/4)个子序列，每个子序列包含四个记录</li>
<li>重复步骤2直到所有记录排序完毕。</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> temp[],<span class="keyword">int</span> s,<span class="keyword">int</span> mid,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = s;</span><br><span class="line">		<span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> x = s;</span><br><span class="line">		<span class="comment">//先将需要合并的两个序列的公共部分由小到大复制到缓存数组</span></span><br><span class="line">		<span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=e)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">				temp[x++] = a[j++];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				temp[x++] = a[i++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//以下两部是将由剩余没有复制到缓存数组的记录直接放到缓存数组后面</span></span><br><span class="line">		<span class="comment">//因为两个需要合并的序列长度不一样的时候肯定会由一个序列的会有剩下</span></span><br><span class="line">		<span class="comment">//没有复制到缓存数组的</span></span><br><span class="line">		<span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">			temp[x++] = a[i++];</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=e)</span><br><span class="line">			temp[x++] = a[j++];</span><br><span class="line">		<span class="comment">//将缓存数组的记录，重新复制回原数组</span></span><br><span class="line">		x = s;</span><br><span class="line">		<span class="keyword">while</span>(x&lt;=e)</span><br><span class="line">			a[x] =temp[x++];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">MSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> temp[],<span class="keyword">int</span> s,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s&lt;e)&#123;</span><br><span class="line">			<span class="comment">//演示的是二路归并（最简单的归并）</span></span><br><span class="line">			<span class="keyword">int</span> mid = (s+e)/<span class="number">2</span>;</span><br><span class="line">			MSort(a,temp,s,mid);</span><br><span class="line">			MSort(a,temp,mid+<span class="number">1</span>,e);</span><br><span class="line">			merge(a,temp,s,mid,e);<span class="comment">//从最递归低层返回的时候开始合并</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">		MSort(a,temp,<span class="number">0</span>,a.length<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>在归并排序中，首先需要一个和原来序列长度异常的辅助序列。空间是O(n),而在递归进行划分归并的时候需要借用递归栈，递归的次数就是进行归并的次数，也就是log2 n 。所以总的归并排序的空间复杂度还是O(n)的。</p>
<p>先看看分割序列的时候，如果给予以上的二路归并的话，也就是递归的深度，其时间复杂度是O(nlogn)。而在合并的时候时间不会超过O(n)。所以归并的时间复杂度是O(nlogn)。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[偶数二进制位反转(JAVA)]]></title>
      <url>dooogo.github.io/2016/10/03/%E5%81%B6%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E5%8F%8D%E8%BD%AC-JAVA/</url>
      <content type="html"><![CDATA[<h3 id="java中相关的位操作"><a href="#java中相关的位操作" class="headerlink" title="java中相关的位操作"></a>java中相关的位操作</h3><table>
<thead>
<tr>
<th>运算</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>按位与</td>
<td>a&amp;b a b对应位与</td>
</tr>
<tr>
<td></td>
<td></td>
<td>按位或</td>
</tr>
<tr>
<td>～</td>
<td>位非</td>
<td>~a a按位取反</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>位右移</td>
<td>a&gt;&gt;b a的二进制位向右移动b位，高位补零</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>位左移</td>
<td>a&lt;&lt;b a的二进制位向左移动b位，低位补零</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>无符号位右移</td>
<td>负数的时候，符号位不参与移位，</td>
</tr>
<tr>
<td>^</td>
<td>位异或</td>
<td>a^b a与b按位异或</td>
</tr>
</tbody>
</table>
<h3 id="二进制位反转思路"><a href="#二进制位反转思路" class="headerlink" title="二进制位反转思路"></a>二进制位反转思路</h3><p><em>以下二进制位用8位做演示</em></p>
<p>a = 0000 0110  ; 十进制： 6</p>
<p>反转二进制位后</p>
<p>a = 0000 0011  ; 十进制： 3</p>
<p>只保留一个数的最低位，其余位变为0：<br>n = 0000 1101;<br>n &amp; 1 = 0000 0001;</p>
<p>假设a = 0000 0110,b=0(用来保存结果) <br><br>a每次右移一位，然后最低位与b的最低位 进行位或，然后b左移一位， 直到a == 0为止，这样 b中则是a的反转二进制位的。</p>
<h4 id="过程演示"><a href="#过程演示" class="headerlink" title="过程演示"></a>过程演示</h4><ol>
<li>a = 0000 011<em>0</em><br>b = 0000 000<em>0</em></li>
<li>a = 0000 001<em>1</em><br><br>  b = 0000 000<em>1</em></li>
<li>a = 0000 000<em>1</em><br><br>  b = 0000 001<em>1</em></li>
<li>a = 0000 000<em>0</em> 停止，此时b就是a反转后的结果</li>
</ol>
<h3 id="java实现代码"><a href="#java实现代码" class="headerlink" title="java实现代码"></a>java实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> r = <span class="number">0</span> ;<span class="comment">//反转的结果</span></span><br><span class="line">  <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123; <span class="comment">// 直到a==0，不然一直进行移位</span></span><br><span class="line">    <span class="comment">//或运算将n的最低位保存到r中，同时r左移一位，</span></span><br><span class="line">    <span class="comment">//保证上次的移位结果向左移动，新的需要保存的移位结果一直在r的最低位中</span></span><br><span class="line">    r  = (r&lt;&lt;<span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">    n  = n&gt;&gt;<span class="number">1</span>; <span class="comment">// n右移一位</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-实例"><a href="#java-实例" class="headerlink" title="java 实例"></a>java 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenNumReverse</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//输入的数的个数</span></span><br><span class="line">		<span class="keyword">int</span>[] seq;<span class="comment">//保存输入结果</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//需要输入的数的个数不为零情况下，一直输入</span></span><br><span class="line">		<span class="keyword">while</span>((count = in.nextInt())!=<span class="number">0</span>)&#123;</span><br><span class="line">			seq = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">				<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">					n = reverseNum(n);</span><br><span class="line">				seq[i] = n;</span><br><span class="line">			&#125;</span><br><span class="line">			print(seq);</span><br><span class="line">		&#125;</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将一个数的二进制位反转</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span> ;</span><br><span class="line">		<span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">			r  = (r&lt;&lt;<span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">			n  = n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * 打印数组</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] res)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(res!=<span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;</span><br><span class="line">				System.out.print(res[i]+<span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		EvenNumReverse o = <span class="keyword">new</span> EvenNumReverse();</span><br><span class="line">		o.reverse();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>输入输出结果</p>
<p>3<br><br>1 6 5<br><br><em>1    3    5</em>    <br><br><br>3<br><br>2 4 6<br><br><em>1    1    3</em><br></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LinkedList 源码分析]]></title>
      <url>dooogo.github.io/2016/10/03/LinkedList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p><strong>LinkedList是List接口的一个实现类，内部是基于一个双向链表实现的。支持添加，移除，替换三种操作。</strong><br><strong>同时，LinkedList中的元素可以是任意类型的，包括null。当需要队列一样的数据操作的时候使用LinkedList是很有用的。</strong></p>
<p>先来看看LinkedList的继承结构：</p>
<blockquote>
<p>AbstractCollection</p>
<p>AbstractList</p>
<p>AbstractSequentialList</p>
<p>LinkedList</p>
</blockquote>
<p>此外LinkedList还直接实现了一下的接口：</p>
<p>List<e>, Deque<e>, Queue<e>, Cloneable, Serializable</e></e></e></p>
<p>List接口在之前额ArrayList分析中已近讲过了。这里就不赘述了。下面主要看看Deque<e>, Queue<e>这两个接口。</e></e></p>
<p><strong>Queue</strong></p>
<p>Queue被设计用来做预先处理的收集器。它除了有继承子Collection的功能实现外，还有插入，删除，查找三个操作。<br>并且这三个操作都有对应的两种类型的实现方法。一种会抛出异常，另一种则是返回一个指定的值。在插入操作还会有容量限制，没有容量限制的话能保证插入不会失败。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean add(E e)</td>
<td>添加一个元素到队列的末尾，如果队列使用容量限制的话，插入成功，返回true，有容量限制且容量已满则否则抛出异常</td>
</tr>
<tr>
<td>boolean offer(E e)</td>
<td>无容量限制则直接插入队列末尾，返回true，否则调用add()进行插入，有异常返回false</td>
</tr>
<tr>
<td>E remove()</td>
<td>从队列的首部移除一个元素，并返回该元素。队列已空则抛出异常。</td>
</tr>
<tr>
<td>E poll()</td>
<td>从队列的首部移除一个元素，并返回该元素。队列已空则返回null。</td>
</tr>
<tr>
<td>E element()</td>
<td>返回队列的末尾的元素，不执行删除操作。队列已空则抛出异常。</td>
</tr>
<tr>
<td>E peek()</td>
<td>返回队列的末尾的元素，不执行删除操作。队列已空则返回null。</td>
</tr>
</tbody>
</table>
<p><strong>Deque</strong>(其实是双向队列的缩写)</p>
<p>继承自Queue。</p>
<p>Deque是一个线性收集器，支持从开头或者结尾添加或者删除元素。Deque的实现类基本都不加入容量限制，但是保留有这个功能。Deque支持的操作有添加，移除，检索元素。每种操作都有两种类型，一种是操作失败直接抛出异常，另一种是返回一个指定的值。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>void addFirst(E e)</td>
<td>队列没有容量限制的话，将元素加入到队列首部。否则抛出异常</td>
</tr>
<tr>
<td>void addLast(E e)</td>
<td>队列没有容量限制的话，将元素加入到队列末尾。否则抛出异常</td>
</tr>
<tr>
<td>boolean offerFirst(E e)</td>
<td>队列没有容量限制的话，将元素加入到队列首部,返回true。否则则去调用addFirst()，如抛出异常则返回false</td>
</tr>
<tr>
<td>boolean offferLast(E e)</td>
<td>队列没有容量限制的话，将元素加入到队列末尾,返回true。否则则去调用addLast()，如抛出异常则返回false</td>
</tr>
<tr>
<td>E removeFirst()</td>
<td>移除队列第一个元素，如果队列为空则抛出异常</td>
</tr>
<tr>
<td>E removeLast()</td>
<td>移除队列最后一个元素，如果队列为空则抛出异常</td>
</tr>
<tr>
<td>E pollFirst()</td>
<td>移除队列第一个元素，如果队列为空则返回null</td>
</tr>
<tr>
<td>E pollLast()</td>
<td>移除队列最后一个元素，如果队列为经为空则返回null</td>
</tr>
<tr>
<td>E getFirst()</td>
<td>获取但是不删除第一个元素，队列为空则抛出异常</td>
</tr>
<tr>
<td>E getLast()</td>
<td>获取但是不删除最后一个元素，队列为空则抛出异常</td>
</tr>
<tr>
<td>E peekFirst()</td>
<td>获取但是不删除第一个元素，队列为空则返回null</td>
</tr>
<tr>
<td>E peekLast()</td>
<td>获取但是不删除最后一个元素，队列为空则返回null</td>
</tr>
</tbody>
</table>
<p>在Deque和Queue中可能抛出的异常有：<br>IllegalStateException，ClassCastException，NullPointerException，IllegalArgumentException</p>
<p><strong>LinkedList</strong></p>
<p>先来看看它的一个内部静态类。<br>实际上是对数据的封装，以及加上它的前后元素的引用。其实和C语言中的链表的指针的意思是一样的。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> Link&lt;ET&gt; &#123;</span><br><span class="line">    ET data;　<span class="comment">//封装的数据元素</span></span><br><span class="line"></span><br><span class="line">    Link&lt;ET&gt; <span class="keyword">previous</span>, <span class="keyword">next</span>;<span class="comment">//该元素指向它的前后元素的引用。</span></span><br><span class="line"></span><br><span class="line">    Link(ET o, Link&lt;ET&gt; p, Link&lt;ET&gt; n) &#123;</span><br><span class="line">        data = o;<span class="comment">//我们使用LinkedList的时候装载的数据对象本身。</span></span><br><span class="line">        <span class="keyword">previous</span> = p;</span><br><span class="line">        <span class="keyword">next</span> = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内部还有两个迭代器内部类：</p>
<ul>
<li>LinkIterator</li>
<li>ReverseLinkIterator</li>
</ul>
<p>我们看看LinkIterator的内部实现：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Link&lt;ET&gt; link, lastLink;<span class="comment">//link当前元素，lastLink最后一次访问到元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定位置开始迭代</span></span><br><span class="line">LinkIterator(LinkedList&lt;ET&gt; object, int <span class="built_in">location</span>) &#123;</span><br><span class="line">    <span class="built_in">list</span> = object;<span class="comment">//队列本身</span></span><br><span class="line">    <span class="comment">//得到原list中的操作记数。后续对list的操作都会使用到，判别是否存在并发操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">location</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">location</span> &lt;= <span class="built_in">list</span>.<span class="built_in">size</span>) &#123;</span><br><span class="line">    expectedModCount = <span class="built_in">list</span>.modCount;</span><br><span class="line">        link = <span class="built_in">list</span>.voidLink;</span><br><span class="line">        <span class="comment">//查找的优化，根据索引位置与list的size比较，从头向尾，还是从末尾向开头开始寻找指定位置的元素</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">location</span> &lt; <span class="built_in">list</span>.<span class="built_in">size</span> / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (pos = -<span class="number">1</span>; pos + <span class="number">1</span> &lt; <span class="built_in">location</span>; pos++) &#123;</span><br><span class="line">                link = link.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (pos = <span class="built_in">list</span>.<span class="built_in">size</span>; pos &gt;= <span class="built_in">location</span>; pos--) &#123;</span><br><span class="line">                link = link.previous;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> new IndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置元素</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="keyword">set</span>(ET <span class="comment">object) &#123;</span></span><br><span class="line">    ...</span><br><span class="line">      <span class="comment">//lastLink就是最后一个访问到的元素  </span></span><br><span class="line">        lastLink.data <span class="comment">= object</span>;</span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加元素</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> add(ET object) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectedModCount == <span class="built_in">list</span>.modCount) &#123;</span><br><span class="line">        <span class="keyword">Link</span>&lt;ET&gt; next = <span class="keyword">link</span>.next;<span class="comment">//当前元素的下一个元素</span></span><br><span class="line">        <span class="keyword">Link</span>&lt;ET&gt; newLink = <span class="literal">new</span> <span class="keyword">Link</span>&lt;ET&gt;(object, <span class="keyword">link</span>, next);<span class="comment">//将新添加的数据封装</span></span><br><span class="line">        <span class="keyword">link</span>.next = newLink;<span class="comment">//link.next指向新元素</span></span><br><span class="line">        next.previous = newLink;<span class="comment">//当前元素的下一个元素的previous指向新元素</span></span><br><span class="line">        <span class="keyword">link</span> = newLink;<span class="comment">//当前的节点更新为新加入的节点</span></span><br><span class="line">        lastLink = <span class="built_in">null</span>;<span class="comment">//最后访问的节点置为空</span></span><br><span class="line">        pos++;<span class="comment">//这实际是新添加元素的节点位置索引值</span></span><br><span class="line">        <span class="comment">//同时自加LinkedList中的操作次数和迭代器中的操作次数，不然肯定会报异常，因为每次</span></span><br><span class="line">        <span class="comment">//对list的操作都会检查这两个值是否相等。</span></span><br><span class="line">        expectedModCount++;</span><br><span class="line">        <span class="built_in">list</span>.modCount++;</span><br><span class="line">        <span class="built_in">list</span>.size++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        throw <span class="literal">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">link</span>.next != <span class="built_in">list</span>.voidLink;<span class="comment">//判断一个节点的next域是否指向null，null就说明到末尾了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//link为空值说明没有前继几点啦，用link.previous != null,可能link==null时，link.previous会报空指针异常。</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> hasPrevious() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">link</span> != <span class="built_in">list</span>.voidLink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ET next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectedModCount == <span class="built_in">list</span>.modCount) &#123;</span><br><span class="line">        LinkedList.<span class="keyword">Link</span>&lt;ET&gt; next = <span class="keyword">link</span>.next;<span class="comment">//当前元素的下一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (next != <span class="built_in">list</span>.voidLink) &#123;</span><br><span class="line">            lastLink = <span class="keyword">link</span> = next;<span class="comment">//同时将保存当前节点和最后访问的节点更新为刚得到的下一个元素</span></span><br><span class="line">            pos++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">link</span>.<span class="built_in">data</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        throw <span class="literal">new</span> NoSuchElementException();<span class="comment">//已到达末尾是调用next，会抛异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    throw <span class="literal">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ET previous() &#123;</span><br><span class="line">      <span class="attr">...</span></span><br><span class="line">        lastLink = <span class="keyword">link</span>;</span><br><span class="line">        <span class="keyword">link</span> = <span class="keyword">link</span>.previous;<span class="comment">//直接从保存当前节点信息的link的previous域获得前继节点</span></span><br><span class="line">        pos--;</span><br><span class="line">        <span class="keyword">return</span> lastLink.<span class="built_in">data</span>;</span><br><span class="line">      <span class="attr">...</span>.</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其实就是add的逆操作，需要注意的是remove操作是将最后访问到的节点删除的，也就是lastLink</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> remove() &#123;</span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">        <span class="keyword">Link</span>&lt;ET&gt; next = lastLink.next;</span><br><span class="line">        <span class="keyword">Link</span>&lt;ET&gt; previous = lastLink.previous;</span><br><span class="line">        next.previous = previous;</span><br><span class="line">        previous.next = next;</span><br><span class="line">        <span class="comment">//当前节点与最后访问的节点指向同意元素，next()或者previous()后，该条件为true</span></span><br><span class="line">        <span class="keyword">if</span> (lastLink == <span class="keyword">link</span>) &#123;</span><br><span class="line">            pos--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">link</span> = previous;<span class="comment">//更新当前节点为删除节点的前一个元素</span></span><br><span class="line">        lastLink = <span class="built_in">null</span>;</span><br><span class="line">        expectedModCount++;</span><br><span class="line">        <span class="built_in">list</span>.size--;</span><br><span class="line">        <span class="built_in">list</span>.modCount++;</span><br><span class="line">      <span class="attr">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>add remove next previous set 这五个操作都会有以下异常判断（并发操作异常）</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (expectedModCount == <span class="built_in">list</span>.modCount) &#123;</span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    throw <span class="literal">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ReverseLinkIterator只是LinkIterator的反序迭代而已，理解好LinkIterator就很好理解ReverseLinkIterator了</p>
<p>迭代器都说了这么多，下面我们看看LinkedList的主体部分：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认构造方法会创建一个空节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    voidLink = <span class="keyword">new</span> Link&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//此时voidLink.previous==voidLink.next==null</span></span><br><span class="line">    voidLink.previous = voidLink;<span class="comment">//指向对象本身，保证使用voidLink.previous不会空指针异常</span></span><br><span class="line">    voidLink.next = voidLink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; collection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();<span class="comment">//new一个LinkedList的时候，总会调用到默认构造方法</span></span><br><span class="line">    addAll(collection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>voidLink是维持整个list的关键所在，基本每个操作都离不开它</strong>　看后面的分析就知道了。</p>
<p>添加元素的时候逻辑基本和上面迭代器中的逻辑一样，只是add(E e),offerFirst(E e)内部是直接调用addLastImpl(E e)执行添加操作而已，而指定位置的添加注意一点上面提及到根据插入点的索引与list的size的中点比较，从而选择从头开始还是从尾开始寻找该位置而已。其实涉及查找的操作都会使用这个策略的。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public void add(int location, E object)的片段而已</span></span><br><span class="line"><span class="keyword">if</span> (location &lt; (size / <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= location; i++) &#123;</span><br><span class="line">        link = link.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; location; i--) &#123;</span><br><span class="line">        link = link.previous;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">add</span>(<span class="params">E <span class="keyword">object</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addLastImpl(<span class="keyword">object</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> boolean <span class="title">addLastImpl</span>(<span class="params">E <span class="keyword">object</span></span>) </span>&#123;</span><br><span class="line">    Link&lt;E&gt; oldLast = voidLink.previous;</span><br><span class="line">    Link&lt;E&gt; newLink = <span class="keyword">new</span> Link&lt;E&gt;(<span class="keyword">object</span>, oldLast, voidLink);</span><br><span class="line">    voidLink.previous = newLink;</span><br><span class="line">    oldLast.next = newLink;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在addAll方法中国，插入逻辑是不变的，只是参数检查而已</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; collection) &#123;</span><br><span class="line">    <span class="keyword">int</span> adding = collection.<span class="keyword">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (adding == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//collection没有元素直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是不是LinkedList的自己的相同对象。是的话会拷贝它所有的元素到ArrayList中。</span></span><br><span class="line">    Collection&lt;? <span class="keyword">extends</span> E&gt; elements = (collection == <span class="keyword">this</span>) ?</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;E&gt;(collection) : collection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由LinkedList的构造方法可知，voidLink　== voidLink.previous（初次调用的时候）</span></span><br><span class="line">    <span class="comment">//不是第一次调用时，voidLink.previous已经指向了最后添加的那个元素了。详见一下几行代码</span></span><br><span class="line">    Link&lt;E&gt; <span class="keyword">previous</span> = voidLink.<span class="keyword">previous</span>;</span><br><span class="line">    <span class="comment">//循环插入collection中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (E e : elements) &#123;</span><br><span class="line">        Link&lt;E&gt; newLink = <span class="keyword">new</span> Link&lt;E&gt;(e, <span class="keyword">previous</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">previous</span>.<span class="keyword">next</span> = newLink;</span><br><span class="line">        <span class="keyword">previous</span> = newLink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">previous</span>.<span class="keyword">next</span> = voidLink;</span><br><span class="line">    voidLink.<span class="keyword">previous</span> = <span class="keyword">previous</span>;</span><br><span class="line">    <span class="comment">//至此，会使得voidLink.next和voidLink.previous都指向最后一个添加的元素，</span></span><br><span class="line">    <span class="keyword">size</span> += adding;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们再来看看addFirst的实现：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span>(<span class="params">E <span class="keyword">object</span></span>) </span>&#123;</span><br><span class="line">    addFirstImpl(<span class="keyword">object</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> boolean <span class="title">addFirstImpl</span>(<span class="params">E <span class="keyword">object</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//第一次addFirstImpl的时候voidLink.next＝＝voidLink，否则则是上次添加在头部的节点</span></span><br><span class="line">    Link&lt;E&gt; oldFirst = voidLink.next;</span><br><span class="line">    <span class="comment">//此时newLink.previous = voidLink，头结点的前继肯定指向空节点嘛（不同于c语言指向的是NULL）</span></span><br><span class="line">    <span class="comment">//newLink.next == voidLink.next</span></span><br><span class="line">    Link&lt;E&gt; newLink = <span class="keyword">new</span> Link&lt;E&gt;(<span class="keyword">object</span>, voidLink, oldFirst);</span><br><span class="line">    voidLink.next = newLink;<span class="comment">//看到没，voidLink.next保存着每次点在在头部的节点信息</span></span><br><span class="line">    oldFirst.previous = newLink;<span class="comment">//oldFirst则是上一次添加在头部的节点啦，它的previous指向newLink就顺理成章啦</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里就能搞明白voidLink的previous和next的作用啦，那么其他的操作都是基于这两个东西操作的。<br>以下举一些例子：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> contains(Object object) &#123;</span><br><span class="line">    <span class="keyword">Link</span>&lt;E&gt; <span class="keyword">link</span> = voidLink.next;<span class="comment">//头节点</span></span><br><span class="line">    <span class="comment">//注意分两种情况查找即可</span></span><br><span class="line">    <span class="keyword">if</span> (object != <span class="built_in">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">link</span> != voidLink) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object.<span class="keyword">equals</span>(<span class="keyword">link</span>.<span class="built_in">data</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">link</span> = <span class="keyword">link</span>.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">link</span> != voidLink) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">link</span>.<span class="built_in">data</span> == <span class="built_in">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">link</span> = <span class="keyword">link</span>.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> E get(int location) &#123;</span><br><span class="line">    <span class="keyword">if</span> (location &gt;= <span class="number">0</span> &amp;&amp; location &lt; size) &#123;</span><br><span class="line">        <span class="keyword">Link</span>&lt;E&gt; <span class="keyword">link</span> = voidLink;<span class="comment">//这里，下一步就用到next 和　previous了</span></span><br><span class="line">        <span class="keyword">if</span> (location &lt; (size / <span class="number">2</span>)) &#123;</span><br><span class="line">            for (int i = <span class="number">0</span>; i &lt;= location; i++) &#123;</span><br><span class="line">                <span class="keyword">link</span> = <span class="keyword">link</span>.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            for (int i = size; i &gt; location; i--) &#123;</span><br><span class="line">                <span class="keyword">link</span> = <span class="keyword">link</span>.previous;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">link</span>.<span class="built_in">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    throw <span class="literal">new</span> IndexOutOfBoundsException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> int indexOf(Object object) &#123;</span><br><span class="line">    int pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">Link</span>&lt;E&gt; <span class="keyword">link</span> = voidLink.next;</span><br><span class="line">    <span class="attr">...</span>.</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>再看看几个重要的方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会抛异常</span></span><br><span class="line"><span class="comment">//注意是从头部移除</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">removeFirstImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从头部添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirstImpl(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从头部移除元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">removeFirstImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有元素返回null</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span> ? <span class="keyword">null</span> : removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">peekFirstImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>只有poll peek操作遇到LinkedList无元素返回null，其他做此类型会抛出异常，其实现的接口已有说明</strong></p>
<p>我们需要主要一下clear():仅是将size置零，voidLink的next,previous指向空元素而已，可见voidLink的作用很关键</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> clear() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line">      voidLink.<span class="keyword">next</span> = voidLink;</span><br><span class="line">      voidLink.<span class="keyword">previous</span> = voidLink;</span><br><span class="line">      modCount++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>通过以上的分析，基本能理解好LinkedList了。其他具体的方法就不一一贴出来了，操作原理和上面的分析大同小异。<br>需要对每个方法详细的理解，可以直接去看LinkedList的源码。</p>
<table>
<thead>
<tr>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody>
<tr>
<td>基于数组实现</td>
<td>基于链表实现</td>
</tr>
<tr>
<td>实现RandomAccess接口，可以直接访问指定索引的元素</td>
<td>没现RandomAccess接口,需要遍历到指定索引的位置</td>
</tr>
<tr>
<td>查找访问快，插入删除慢</td>
<td>查找访问慢，插入删除快</td>
</tr>
<tr>
<td>存在扩容拷贝</td>
<td>没有容量限制，无需扩容，内部会使用到ArrayList(addAll的时候)</td>
</tr>
</tbody>
</table>
<p><strong>均不是线程安全的，并发操作会报异常</strong></p>
<h3 id="you-KO-LinkedList"><a href="#you-KO-LinkedList" class="headerlink" title="you KO LinkedList !!!"></a>you KO LinkedList !!!</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList 源码分析]]></title>
      <url>dooogo.github.io/2016/08/26/ArrayList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><strong>List是一个维持内部元素有序的采集器，其中的每个元素都会拥有一个索引，每个元素都可以<br>通过他的索引获取到元素，并且索引的开始下标是从0开始的，List中的元素还可重复。<br>而Set中不不含重复元素的。</strong></p>
<p>以上便List的定义。实际中List仅是一个接口，并没有具体的方法实现，只是定义好了统一的方法。</p>
<p>以下便是List的继承结构：</p>
<ul>
<li>Iterable<ul>
<li>Collection<ul>
<li>List　</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>我们先来看看顶级的Iterable：</p>
<blockquote>
<p>Instances of classes that implement this interface can be used with<br>the enhanced for loop.<br>也就是说继承了这个接口能增强子类的循环能力。</p>
</blockquote>
<p>Iterable中有唯一定义的接口方法：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Iterator</span>&lt;T&gt; <span class="keyword">iterator</span>();</span><br></pre></td></tr></table></figure>
<p>他的作用就是返回一个Iterator<t>的实例。</t></p>
<p>接下来看看Iterator到底是什么东西</p>
<p>他是一个对象序列的迭代器，例如说集合。<br>它拥有三个接口方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否还有更多的没有被迭代的元素，有则返回true，否则返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//返回下一个对象元素，并且是迭代器前进，如果没有元素了的话会抛出NoSuchElementException</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//移除最后通过next()返回对象元素。此方法只能在调用next()后才能调用，否则会抛出IllegalStateException</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>我们再来看看Collection接口：</p>
<p>Collection是所受Collection类型的根节点，也就是说所有的集合类型的都会实现这个接口。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>add(E object)</td>
<td>尝试将一个对象添加到Collection中，保证添加成功了该对象元素就包含在Collection中。在实现该接口方法的类中，需要根据具体的添加规则抛出相应的Exception。注意一点是抛出异常了就不会返回false,而添加成功会返回true。</td>
</tr>
<tr>
<td>addAll(Collection&lt;? extends E&gt; collection)</td>
<td>试图将参数中的collection的所有元素添加到当前实例中的Collection中。添加成功返回ture，否则返回false。</td>
</tr>
<tr>
<td>clear()</td>
<td>将原本collection中的元素全部删除。如果移除操作不允许会抛出UnsupportedOperationException。</td>
</tr>
<tr>
<td>contains(Object object)</td>
<td>遍历Collection中的所有元素，找到一个相等的元素则返回true，否则返回false。可能抛出的异常：ClassCastException，NullPointerException。</td>
</tr>
<tr>
<td>containsAll(Collection&lt;?&gt; collection)</td>
<td>Collection是是否包含参数中collection中的每个元素，即使是每个参数仅仅包含一次都会返回true，否则返回false。参数collection＝＝null 或者 collection中至少包含一个null元素的时候回抛出NullPointerException</td>
</tr>
<tr>
<td>equals(Object object）</td>
<td>当前Collection中与给定的object是否相等。</td>
</tr>
<tr>
<td>hashCode()</td>
<td>返回Collection中所有元素的哈希值和，主要用于比较。</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>是否Collection中没有元素。</td>
</tr>
<tr>
<td>Iterator<e> iterator()</e></td>
<td>返回一个迭代器实例，用来访问Collection中的内容。</td>
</tr>
<tr>
<td>remove(Object object)</td>
<td>将Collection中与参数object相等的元素。可能抛出的异常：UnsupportedOperationException,ClassCastException,NullPointerException</td>
</tr>
<tr>
<td>removeAll(Collection&lt;?&gt; collection)</td>
<td>将在Collection中包含参数collection中的元素移除。返回的结果是Collection中不包含有参数collection中的元素。</td>
</tr>
<tr>
<td>retainAll(Collection&lt;?&gt; collection)</td>
<td>将Collection中不包含在参数collection中的元素移除。返回的结果是Collection中包含有参数collection中的元素。</td>
</tr>
<tr>
<td>size()</td>
<td>返回Collection中元素的个数，如果个数大于Integer.MAX_VALUE，返回的结果是Integer.MAX_VALUE</td>
</tr>
<tr>
<td>Object[] toArray()</td>
<td>将Collection中的所有元素根据迭代顺序以一个新数组返回，即使Collection的底层已经是一个数组结构。</td>
</tr>
<tr>
<td><t> T[] toArray(T[] array)</t></td>
<td>将Collection中的元素根据迭代顺序添加到给定的array中，如果array不能装下Collection中的所有元素则会新建一个对应类型，对应大小的数组，如果array的大小大于Collection的元素个数，则array多余的索引位置元素置为null。</td>
</tr>
</tbody>
</table>
<p>而List在Collection的基础上增加了以下接口方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>add(int location, E object)</td>
<td>在索引location处插入一个元素，location＝＝size()的话，直接在末尾添加。<size的话，在location处插入，location之后的元素依次后移。location 0="" <="" 或者="" location=""> size()则抛出IndexOutOfBoundsException</size的话，在location处插入，location之后的元素依次后移。location></td>
</tr>
<tr>
<td>boolean addAll(int location, Collection&lt;? extends E&gt; collection)</td>
<td>在指定索引处插入一个contains的所有元素</td>
</tr>
<tr>
<td>E get(int location)</td>
<td>返回指定索引处的元素。location &lt; 0 或者 location &gt; size()则抛出IndexOutOfBoundsException</td>
</tr>
<tr>
<td>int indexOf(Object object)</td>
<td>返回一个指定object元素在list中的索引，没有此元素则返回-1</td>
</tr>
<tr>
<td>int lastIndexOf(Object object)</td>
<td>最后一个等于指定object元素的索引，没有则返回-1</td>
</tr>
<tr>
<td>remove(int location)</td>
<td>根据索引移除元素，location &lt; 0 或者 location &gt; size()则抛出IndexOutOfBoundsException</td>
</tr>
<tr>
<td>remove(Object object)</td>
<td>找到并移除了该元素则返回true，否则返回false</td>
</tr>
<tr>
<td>E set(int location, E object)</td>
<td>将指定索引位置设置为元素object。会有IndexOutOfBoundsException，ClassCastException。</td>
</tr>
<tr>
<td>List<e> subList(int start, int end)</e></td>
<td>返回索引start到end处的子列表，会有IndexOutOfBoundsException。</td>
</tr>
</tbody>
</table>
<p>此外还有：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span>(<span class="params"><span class="keyword">int</span> location</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>其中ListIterator继承子Iterator，新添加了几个方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E object)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList继承自AbstractList，实现了Cloneable，Serializable，RandomAccess接口<br>而AbstractList继承自AbstractCollection<e>实现了List<e>接口，是一个抽象类，他的子类必须实现iterator(),size()这个两个抽象方法，以使得可以创建处一个不可变的集合。而创建一个可修改的集合类型则需要重写add()方法。</e></e></p>
<p><strong>ArrayList是List的一个基于<em>数组</em>的实现类，支持增加，移除，替换等元素操作。并且支持所有元素类型包括null。它的所有操作<em>同步</em>进行的。而CopyOnWriteArrayList则可以用于高度并发，频繁遍历的情形。</strong></p>
<p>数组容量增长步长。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_CAPACITY_INCREMENT = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>
<p><strong>构造函数</strong></p>
<p>初始化时指定数组容量，直到自己数据容量的时候，最好都指定。默认是一个空数组。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(int capacity) &#123;</span><br><span class="line">   <span class="built_in"> if </span>(capacity &lt; 0) &#123;</span><br><span class="line">       <span class="built_in"> throw </span>new IllegalArgumentException(<span class="string">"capacity &lt; 0: "</span> + capacity);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> array </span>= (capacity == 0 ? EmptyArray.OBJECT<span class="keyword"> :</span><span class="built_in"> new </span>Object[capacity]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword"></span><br><span class="line">public</span> ArrayList() &#123;</span><br><span class="line">   <span class="built_in"> array </span>= EmptyArray.OBJECT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">　//指定一个collection初始化的时候</span><br><span class="line"><span class="keyword"> public</span> ArrayList(Collection&lt;? extends E&gt; collection) &#123;</span><br><span class="line">  <span class="built_in"> if </span>(collection == null) &#123;</span><br><span class="line">      <span class="built_in"> throw </span>new NullPointerException(<span class="string">"collection == null"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   //先转化成数组</span><br><span class="line">   Object[] a = collection.toArray();</span><br><span class="line"></span><br><span class="line">  <span class="built_in"> if </span>(a.getClass() != Object[].class) &#123;</span><br><span class="line">      　//创建一个长度为collection长度的新数组，并将collection数组复制到新数组中</span><br><span class="line">       Object[] newArray =<span class="built_in"> new </span>Object[a.length];</span><br><span class="line">       System.arraycopy(a, 0, newArray, 0, a.length);</span><br><span class="line">       a = newArray;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="built_in"> array </span>= a;</span><br><span class="line">   size = a.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>添加</strong></p>
<p>添加的时候基本策略是，有指定添加的索引位置的时候就检查是否索引越界，如果是则直接抛出越界异常。然后是检查当前数组是否已经装满，如果是则计算新的数组容量，并创建一个新的数组，原数组的元素复制到新数组并将新添加的元素加入到list的末尾，更新size值。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E object) &#123;</span><br><span class="line">    <span class="keyword">Object</span>[] a = array;</span><br><span class="line">    <span class="built_in">int</span> s = <span class="built_in">size</span>;</span><br><span class="line">    <span class="comment">//原数组已满</span></span><br><span class="line">    <span class="keyword">if</span> (s == a.length) &#123;</span><br><span class="line">        <span class="keyword">Object</span>[] newArray = <span class="keyword">new</span> <span class="keyword">Object</span>[s +</span><br><span class="line">                (s &lt; (MIN_CAPACITY_INCREMENT / <span class="number">2</span>) ?</span><br><span class="line">                 MIN_CAPACITY_INCREMENT : s &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, s);</span><br><span class="line">        array = a = newArray;</span><br><span class="line">    &#125;</span><br><span class="line">    a[s] = object;</span><br><span class="line">    <span class="built_in">size</span> = s + <span class="number">1</span>;<span class="comment">//容量加一</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法是根据传入的当前数组容量值计算并返回新的容量值，时空权衡。<br>扩容策略：</p>
<ol>
<li>当前容量小于最下增长量的一半：<br>当前容量＋最小增长量</li>
<li>当前容量大于等于最下增长量的一半:<br>当前容量＋当前容量/2</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> currentCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> increment = (currentCapacity &lt; (MIN_CAPACITY_INCREMENT / <span class="number">2</span>) ?</span><br><span class="line">            MIN_CAPACITY_INCREMENT : currentCapacity &gt;&gt; 1);</span><br><span class="line">    <span class="keyword">return</span> currentCapacity + increment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>查找</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>默认返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>public boolean contains(Object object)</td>
<td>false</td>
</tr>
<tr>
<td>public int indexOf(Object object)</td>
<td>-1</td>
</tr>
<tr>
<td>public int lastIndexOf(Object object)</td>
<td>-1</td>
</tr>
<tr>
<td>public boolean remove(Object object)</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>当需要查找的元素对象不为空的时候，从头开始遍历数组的元素，equals则直接返回对应类型。<br>查找的元素对象为空时，从头开始遍历数组的元素，遇到一个　==null的元素的时候则直接返回对应类型。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Object[] a = array;</span><br><span class="line"><span class="keyword">int</span> s = size;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">object</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">object</span>.equals(a[i])) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> ...;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> ...;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>remove一个元素的时候会有这么一个操作：a[s] = null; 是为了防止内存溢出。</p>
<p>指定位置元素移除： public E remove(int index)，只需检测时候下标越界。不越界则移除该位置的元素。</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">移除元素位置之后的元素都前移一位</span><br><span class="line">System.arraycopy(a, <span class="keyword">index</span> + <span class="number">1</span>, a, <span class="keyword">index</span>, --s - <span class="keyword">index</span>);</span><br><span class="line"><span class="comment">//此时a[s] == a[s－1]，所以可以删除末尾的那个a[s]</span></span><br><span class="line">a[s] = <span class="keyword">null</span>;  <span class="comment">// Prevent memory leak</span></span><br><span class="line">size = s;</span><br></pre></td></tr></table></figure>
<p><strong>在每次list的增删改操作的时候都会modCount++。modCount是用来记录list的修改次数，<br>主要是在ArrayList总的内部迭代器ArrayListIterator中使用</strong></p>
<p><strong>ArrayListIterator</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余没有被迭代到的元素数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> remaining = <span class="keyword">size</span>;</span><br><span class="line"><span class="comment">//可被使用remove()移除的元素的索引, -1表示没有可以被移除的元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> removalIndex = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//期待的list操作次数，可判断是否存在并发操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否迭代完</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> remaining != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="keyword">next</span>() &#123;</span><br><span class="line">    ArrayList&lt;E&gt; ourList = ArrayList.<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">int</span> rem = remaining;</span><br><span class="line">    <span class="comment">//存在并发操作</span></span><br><span class="line">    <span class="keyword">if</span> (ourList.modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//已经迭代完，继续迭代抛出异常，　用hasNext()做检查，避免此异常</span></span><br><span class="line">    <span class="keyword">if</span> (rem == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    &#125;</span><br><span class="line">    remaining = rem - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//ourList.size - rem处的元素</span></span><br><span class="line">    <span class="keyword">return</span> (E) ourList.array[removalIndex = ourList.<span class="keyword">size</span> - rem];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;</span><br><span class="line">    Object[] a = array;</span><br><span class="line">    <span class="keyword">int</span> removalIdx = removalIndex;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    System.arraycopy(a, removalIdx + <span class="number">1</span>, a, removalIdx, remaining);</span><br><span class="line">    a[--<span class="keyword">size</span>] = <span class="keyword">null</span>;  <span class="comment">// Prevent memory leak</span></span><br><span class="line">    removalIndex = -<span class="number">1</span>;<span class="comment">//重新置为-1，表示该索引的元素已移除。除非被next()更新。</span></span><br><span class="line">    expectedModCount = ++modCount;<span class="comment">//会更新list的操作次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再来看看的ArrayList的迭代器中定义的equals策略</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> o) &#123;</span><br><span class="line">    <span class="comment">//引用相等</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//参数o不是List的子类</span></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> List)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;?&gt; that = (List&lt;?&gt;) o;</span><br><span class="line">    <span class="built_in">int</span> s = <span class="built_in">size</span>;</span><br><span class="line">    <span class="comment">//两个list的size不想等</span></span><br><span class="line">    <span class="keyword">if</span> (that.<span class="built_in">size</span>() != s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Object</span>[] a = array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (that <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">            <span class="keyword">Object</span> eThis = a[i];</span><br><span class="line">            <span class="keyword">Object</span> ethat = that.<span class="built_in">get</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (eThis == <span class="keyword">null</span> ? ethat != <span class="keyword">null</span> : !eThis.equals(ethat)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 参数的list不支持随机访问，则使用迭代器进行迭代</span></span><br><span class="line">        Iterator&lt;?&gt; it = that.iterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line">            <span class="keyword">Object</span> eThis = a[i];</span><br><span class="line">            <span class="keyword">Object</span> eThat = it.next();</span><br><span class="line">            <span class="keyword">if</span> (eThis == <span class="keyword">null</span> ? eThat != <span class="keyword">null</span> : !eThis.equals(eThat)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="至此，ArrayList已被你KO。"><a href="#至此，ArrayList已被你KO。" class="headerlink" title="至此，ArrayList已被你KO。"></a>至此，ArrayList已被你KO。</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewStub 源码简解]]></title>
      <url>dooogo.github.io/2016/08/24/ViewStub-%E6%BA%90%E7%A0%81%E7%AE%80%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="ViewStub"><a href="#ViewStub" class="headerlink" title="ViewStub"></a>ViewStub</h3><p>ViewStub是一个未加载时不可见的不会占据实际大小的，且可以用来懒加载布局资源的控件。<br>当ViewStub被设置成可见或者是布局资源被inflated，ViewStub就会inflate它自己之中的View或者Views<br>到父布局中。因此，ViewStub使用了setVisibility(View.VISIBLE)或者inflate()后才会存在于view的绘制图层中。</p>
<p>ViewStub中的View根据布局参数inflated后加入到ViewStub的父布局中，同样的，我们还可以定义或者重写inflate view 的id<br>通过使用ViewStub中的inflatedId这个属性。<br> <pre><br>   <viewstub android:id="@+id/stub" android:inflatedid="@+id/subTree" android:layout="@layout/mySubTree" android:layout_width="120dip" android:layout_height="40dip"><br> </viewstub></pre></p>
<p> 因此就可以通过id”stub”这个ViewStub了。当”mySubTree”这个布局资源被加载后，这个ViewStub就北从它的父布局中移除了。<br> 而由ViewStub中指定的布局资源“mySubTree”创建出来的view就可以通过id”subTree”了。<br>并且这个最后被加载出来的view就赋予了120dip的宽和40dip高。</p>
<p>通常地通过一下的方法将ViewStub加载到布局中：</p>
<pre>
ViewStub stub = (ViewStub) findViewById(R.id.stub);
View inflated = stub.inflate();
 </pre>

<p> 当调用ViewStub的inflate()后，该ViewStub就会将其中加载出来的view加载到ViewStub的父布局中，并且返回inflate的到的view.<br> 这样就可以不通过findViewById()就可以获取一个view的引用了。</p>
<hr>
<p> ViewStub 继承自　View　拥有五个构造方法，主要有一下这两个构造方法：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ViewStub(<span class="built_in">Context</span> <span class="built_in">context</span>, AttributeSet attrs, int defStyleAttr, int defStyleRes)</span><br><span class="line">super(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">final TypedArray a = <span class="built_in">context</span>.obtainStyledAttributes(attrs,</span><br><span class="line">        R.styleable.ViewStub, defStyleAttr, defStyleRes)<span class="comment">;</span></span><br><span class="line">mInflatedId = a.getResourceId(R.styleable.ViewStub_inflatedId, NO_ID)<span class="comment">;</span></span><br><span class="line">mLayoutResource = a.getResourceId(R.styleable.ViewStub_layout, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">mID = a.getResourceId(R.styleable.ViewStub_id, NO_ID)<span class="comment">;</span></span><br><span class="line">a.recycle()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">setVisibility(GONE)<span class="comment">;</span></span><br><span class="line">setWillNotDraw(true)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p> 从上可知只要是根据AttributeSet获取inflatedId , layout 和　id 这三个属性值。<br> 关键是在于setVisibility(GONE);setWillNotDraw(true);这样在布局文件中的ViewStub<br> 就不会在初始化布局的时候加载ViewStub了。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewStub</span><span class="params">(Context context, @LayoutRes <span class="keyword">int</span> layoutResource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    mLayoutResource = layoutResource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这个主要是直接在代码中新建一个ViewStub的时候使用。它就获取了布局资源的id而已。</p>
<p> 还需要注意的一点是： 被加载出来的view是一个弱引用。</p>
<p> <code>private WeakReference&lt;View&gt; mInflatedViewRef;</code></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">以下是重写了View的setVisibility方法</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setVisibility</span><span class="params">(<span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//第一次设置的mInflatedViewRef==null,则调用inflate()去加载view</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mInflatedViewRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//已经经过加载后直接从mInflatedViewRef中获取该view</span></span><br><span class="line">        View view = mInflatedViewRef.get();</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.setVisibility(visibility);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"setVisibility called on un-referenced view"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setVisibility(visibility);</span><br><span class="line">        <span class="keyword">if</span> (visibility == VISIBLE || visibility == INVISIBLE) &#123;</span><br><span class="line">            inflate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 以下便是inflate的方法全部内容，逻辑还是很简单的</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> View inflate() &#123;</span><br><span class="line">   　<span class="comment">//获取父view</span></span><br><span class="line">    <span class="keyword">final</span> ViewParent viewParent = getParent();</span><br><span class="line">    <span class="comment">//保证父view必须是一个ViewGroup</span></span><br><span class="line">    <span class="keyword">if</span> (viewParent != <span class="keyword">null</span> &amp;&amp; viewParent <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">       <span class="comment">//ViewStub中view的布局id</span></span><br><span class="line">        <span class="keyword">if</span> (mLayoutResource != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ViewGroup <span class="keyword">parent</span> = (ViewGroup) viewParent;</span><br><span class="line">            <span class="keyword">final</span> LayoutInflater factory;</span><br><span class="line">            <span class="keyword">if</span> (mInflater != <span class="keyword">null</span>) &#123;</span><br><span class="line">                factory = mInflater;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                factory = LayoutInflater.from(mContext);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> View view = factory.inflate(mLayoutResource, <span class="keyword">parent</span>,</span><br><span class="line">                    <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//为inflate出来的view设置id</span></span><br><span class="line">            <span class="keyword">if</span> (mInflatedId != NO_ID) &#123;</span><br><span class="line">                view.setId(mInflatedId);</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//找到在父布局中的索引</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = <span class="keyword">parent</span>.indexOfChild(this);</span><br><span class="line">           <span class="comment">//将ViewStub从父布局中中移除</span></span><br><span class="line">            <span class="keyword">parent</span>.removeViewInLayout(this);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//根据刚刚得到的布局索引，将inflate得到的view添加到父布局中</span></span><br><span class="line">            <span class="keyword">final</span> ViewGroup.LayoutParams layoutParams = getLayoutParams();</span><br><span class="line">            <span class="keyword">if</span> (layoutParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">parent</span>.addView(view, index, layoutParams);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">parent</span>.addView(view, index);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新mInflatedViewRef为新inflate得到的view</span></span><br><span class="line">            mInflatedViewRef = <span class="keyword">new</span> WeakReference&lt;View&gt;(view);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//inflate完毕的回调接口</span></span><br><span class="line">            <span class="keyword">if</span> (mInflateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInflateListener.onInflate(this, view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"ViewStub must have a valid layoutResource"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ViewStub must have a non-null ViewGroup viewParent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ViewStub中定义的inflated完毕的回调接口，其作用见名就可以知义了。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title">OnInflateListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInflate</span>(<span class="params">ViewStub stub, View inflated</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript数组学习总结]]></title>
      <url>dooogo.github.io/2016/05/20/Javascript%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="数组的基本特点"><a href="#数组的基本特点" class="headerlink" title="数组的基本特点"></a>数组的基本特点</h3><ul>
<li>数组元素是任意类型的</li>
<li>可能的最大索引是2^32-2，默认起始索引是 0</li>
<li>Javascript的数组是动态的，无需手动开辟内存</li>
<li>数组可能不连续</li>
<li>每个数组都与一个length属性，length之比数组中所有元素的索引值都大</li>
</ul>
<h3 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1.创建数组"></a>1.创建数组</h3><ul>
<li>四种方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">var</span> arr = [];   <span class="comment">//空数组，不含任何元素</span></span><br><span class="line"><span class="number">2.</span>  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">//空数组，不含任何元素 效果与1一样</span></span><br><span class="line"><span class="number">3.</span>  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  <span class="comment">//初始化数组的同时，添加新元素</span></span><br><span class="line"><span class="number">4.</span>  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="string">''</span>,<span class="number">3</span>);    <span class="comment">//效果与3一样，数组用元素可以是任意类型</span></span><br><span class="line"><span class="number">5.</span>  <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);    <span class="comment">//指定长度创建一个数组，此时数组长度length=10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意点<blockquote>
<p>数组直接量的末尾可以有可选逗号，因此创建数组的时候末尾的逗号一般可以省略</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="keyword">var</span> arr = [<span class="number">1</span>,,<span class="number">3</span>];    <span class="comment">//此时数组中有三个元素，中间那个元素是undefined</span></span><br><span class="line"><span class="number">2.</span>  <span class="keyword">var</span> arr = [,,];   <span class="comment">//此时数组中只有两个元素，都是undefined</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="2-元素读写与删除"><a href="#2-元素读写与删除" class="headerlink" title="2.元素读写与删除"></a>2.元素读写与删除</h3><ol>
<li>使用 [ ] 来操作数组元素</li>
<li>数组是对象的特殊形式，用方括号访问数组元素就像用其访问对象属性一样</li>
<li>javascript中对于小于2^32-2的非负整数索引，会自动维护length的值</li>
<li>使用负数或者非整数作为数组的索引的时候，会自动转化为字符串做索引，因此不存在数组“越界”的概念</li>
<li>字符串做索引的时候能转化为非负整数的时候，会默认转化为非负整数的索引</li>
<li>试图查询数组中不存在的索引的时候，会返回undefined<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">var a1 =a[<span class="number">0</span>];   <span class="comment">//读数组中的第一个元素，默认索引从0开始</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">'A'</span>;     <span class="comment">//给数组中0索引的写入新值 'A'</span></span><br><span class="line">a[<span class="number">10</span>] = <span class="string">'B'</span>;     <span class="comment">//数组中没有索引为10的元素，则直接生产索引为10的元素，此时length=11</span></span><br><span class="line">a[-<span class="number">1.1</span>] =<span class="number">1.1</span>;    <span class="comment">//创建“-1.1”的属性，值为1.1</span></span><br><span class="line">a[<span class="string">'1000'</span>]=<span class="number">1000</span>;      <span class="comment">//此时该元素是数组的第1001个元素</span></span><br><span class="line">a[<span class="number">1.000</span>] = <span class="number">1</span>;       <span class="comment">//等价于a[1] = 1</span></span><br><span class="line">a.<span class="keyword">push</span>(<span class="number">0</span>);          <span class="comment">//等价于a[a.length] = 0;</span></span><br><span class="line">a.<span class="keyword">push</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);      <span class="comment">//在数组末尾连续添加三个元素</span></span><br><span class="line">a.<span class="keyword">pop</span>();            <span class="comment">//删除数组末尾的元素，length = length-1；</span></span><br><span class="line"><span class="keyword">delete</span> a[<span class="number">1</span>];        <span class="comment">//删除索引1处的元素，此操作不会改变length值</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-稀疏数组"><a href="#3-稀疏数组" class="headerlink" title="3.稀疏数组"></a>3.稀疏数组</h3><blockquote>
<p>数组中的索引不是连续的，则称这个数组是稀疏数组，此时数组length值大于数组元素的个数</p>
</blockquote>
<ul>
<li><p>例子</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">a</span> = <span class="built_in">new</span> Array(<span class="number">10</span>)<span class="comment">;//数组没有元素，length=10</span></span><br><span class="line"><span class="keyword">a</span> = [] <span class="comment">;//空数组（也就是没有元素），length=0；</span></span><br><span class="line"><span class="keyword">a</span>[<span class="number">1000</span>] = <span class="number">1</span>;<span class="comment"> //添加新元素1，此时length =10001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意点</p>
<blockquote>
<p>在数组中直接量中省略值时不会创建稀疏数组，省略的元素是存在于数组中的，其值为undefined，和数组中根本不存在元素是有差别的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [,];<span class="comment">//无元素的空数组，length=1；</span></span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="literal">undefined</span>];<span class="comment">//含元素undefined元素的数组，length = 1；</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a1 ;   <span class="comment">//false ,a1在索引0处没有元素</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a2 ;   <span class="comment">//true ,a2在索引0出有一个undefined元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = [,,,];  <span class="comment">// length = 3;</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// length =3;</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a1 ;   <span class="comment">//true ,a1在索引0处有元素undefined</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> a2 ;   <span class="comment">//false ,a2在索引0处没有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a与b效果一样</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="literal">undefined</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="4-数组长度"><a href="#4-数组长度" class="headerlink" title="4.数组长度"></a>4.数组长度</h3><ul>
<li>数组长度length 在非稀疏数组中，为数组元素赋值的时候，当前索index引大于等于length，那么length = index +1，这是数组自动维护的。</li>
<li>将length设置为一个小于当前length值并且是非负整数 L 的时候，数组中大于等于索引L的元素会被删除，删除方式是逐个删除</li>
<li>当设置数组长度length大于当前数组的长度值时，不会创建新的元素，只是在数组的末尾创建一个空的区域</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];<span class="comment"> // length=5;</span></span><br><span class="line"><span class="keyword">a</span>.<span class="built_in">length</span> = <span class="number">3</span>;  <span class="comment"> //此时数组为[1,2,3]</span></span><br><span class="line"><span class="keyword">a</span>.<span class="built_in">length</span> = <span class="number">0</span>;  <span class="comment"> //此时数组为[ ]</span></span><br><span class="line"><span class="keyword">a</span>.<span class="built_in">length</span> = <span class="number">5</span>;  <span class="comment"> //length =5，数组为[ ]</span></span><br></pre></td></tr></table></figure>
<p>在ECMAScript 5中可以通过Object.defineProperty()让数组的长度变为只读，但是数组内部还是能维护数组的长度length的</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a,<span class="string">"length"</span>,&#123;writable:<span class="keyword">false</span>&#125;);</span><br><span class="line">a.length = <span class="number">0</span>;   <span class="comment">//此时数组的长度将不会被设置成0</span></span><br></pre></td></tr></table></figure>
<h3 id="5-数组遍历"><a href="#5-数组遍历" class="headerlink" title="5.数组遍历"></a>5.数组遍历</h3><blockquote>
<p>使用for in 遍历数组的时候需要注意 for in 遍历能枚举集成的属性名，例如添加到Array.Prototype中的方法，因此遍历的时候因该过滤掉这些不必要的属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>,l = a.length;i&lt;l;i++)&#123;</span><br><span class="line">    <span class="comment">//跳过null undefined 和 不存在的元素</span></span><br><span class="line">    <span class="keyword">if</span>(!a[i])</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//跳过undefined 和 不存在的元素</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]===<span class="literal">undefined</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//跳过不存在的元素</span></span><br><span class="line">    <span class="keyword">if</span>(!(i <span class="keyword">in</span> a))</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用for in 处理稀疏数组</span></span><br><span class="line"><span class="comment">// i 是得到数组中含有元素的索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="comment">//获取索引i的值</span></span><br><span class="line">    <span class="keyword">var</span> value = a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//过滤继承过来的属性名</span></span><br><span class="line">    <span class="keyword">if</span>(!a.hasOwnProperty(i)) <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//跳过非负整数的元素</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.abs(<span class="built_in">Number</span>(i))))!==i) <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-多维数组"><a href="#6-多维数组" class="headerlink" title="6.多维数组"></a>6.多维数组</h3><blockquote>
<p>在表面上javascript不支持多维数组，但是数组可以存放任意的类型的这个特点可以变向的实现多维数组，实际中也很常用。</p>
<p>基本思想就是数组中在存放另一个数组，可以多层嵌套，但是层数太多，管理和操作都会越来越复杂</p>
</blockquote>
<ul>
<li>一个简单的多维数组<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">table</span> = new Array(5);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = 0,<span class="keyword">l</span> = <span class="keyword">table</span>.length;i&lt;<span class="keyword">l</span>)</span><br><span class="line">    <span class="keyword">table</span>[i] = new Array(10);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = 0,<span class="keyword">l</span> = <span class="keyword">table</span>.length;i&lt;<span class="keyword">l</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = 0,<span class="keyword">l</span> = <span class="keyword">table</span>.length;j&lt;<span class="keyword">l</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">table</span>[i][j] = i*j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="7-数组方法"><a href="#7-数组方法" class="headerlink" title="7.数组方法"></a>7.数组方法</h3><p><strong><em>ECMAScript 3 :</em></strong></p>
<blockquote>
<p>数组方法是定义在Array.prototype中的，对所有数组都可以使用</p>
<ul>
<li>join()<br>将数组中所有元素都转化为字符串并连接在一起，默认分隔符是’,’,可以指定分隔符</li>
</ul>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.<span class="keyword">join</span>();  <span class="comment">// "1,2,3"</span></span><br><span class="line">a,<span class="keyword">join</span>(<span class="string">""</span>);<span class="comment">// "123"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>reverse()<blockquote>
<p>数组元素顺序反转，返回反转后的数组，此过程在原数组进行，不创建新数组</p>
</blockquote>
</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.<span class="built_in">reverse</span>().<span class="built_in">join</span>(); //结果是<span class="string">"3,2,1"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>sort()<blockquote>
<p>将数组元素进行排序，不带参数将默认按字典序排序。设比较的两数为(未排序时，a在b前面) a,b 返回值 &gt;0 则使a排在b之后，返回值 &lt; 0 则使a排在b之前，返回值 ==0 则使a，b顺序无关紧要</p>
</blockquote>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>];</span><br><span class="line">a.<span class="built_in">sort</span>().<span class="built_in">join</span>();</span><br><span class="line">a.<span class="built_in">sort</span>(function(a,b)&#123;</span><br><span class="line">    <span class="comment">//自定义的排序规则(此处是递减排序)</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;).<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>concat()<blockquote>
<p>创建并返回一个数组，他的元素是原数组和concat()中的每个参数，参数是数组的时候，连接的是数组的元素，而非数组本身。当参数是多层嵌套的数组的时候不会递归的把多层嵌套的数组元素取出来拼接到原数组。</p>
</blockquote>
</li>
</ul>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="comment">[1,2,3]</span>;</span><br><span class="line">a.concat(4,<span class="comment">[5,6,<span class="comment">[7,8]</span>]</span>);// 新数组<span class="comment">[1,2,3,4,5,6,<span class="comment">[7,8]</span>]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>slice()<blockquote>
<p>返回指定数组的一个片段（子数组），一个参数的时候截取的是 参数i - length，连个参数（a,b）的时候是截取 a包括a到b之间的元素，当参数为负整数时是从末尾元素开始数的第|x|个</p>
</blockquote>
</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">a.slice<span class="comment">(3)</span>;     <span class="comment">//[4,5]</span></span><br><span class="line">a.slice<span class="comment">(1,2)</span>;   <span class="comment">//[2]</span></span><br><span class="line">a.slice<span class="comment">(-4,-2)</span>; <span class="comment">//[2,3]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>splice()<blockquote>
<p>在数组中删除或者插入数据，一个参数是删除指定索引到结尾的全部元素，两个参数的时候是删除指定区间元素，大于两个参数的时候是删除指定元素后插入指定位置。第一个参数是要删除元素的索引，第二个参数是由起始索引到结束索引的长度，第二个之后的参数是插入到起始删除索引位置的元素。</p>
</blockquote>
</li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1,2,3,4</span>]<span class="comment">;</span></span><br><span class="line">a.splice(<span class="number">2</span>,<span class="number">1</span>)<span class="comment">;  //[1,2,4]</span></span><br><span class="line">a.splice(<span class="number">1</span>)<span class="comment">;   //[1]</span></span><br><span class="line">a.splice(<span class="number">1,0,2,3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>])<span class="comment">; // [1,2,3,4,[5,6]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>push() 和 pop()<blockquote>
<p>和栈结构中的圧栈出栈概念一样。push()带多个参数的时候是按顺序压入</p>
</blockquote>
</li>
</ul>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">s</span> = []<span class="comment">;</span></span><br><span class="line"><span class="keyword">s</span>.push(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">s</span>.push([<span class="number">3</span>,<span class="number">4</span>])<span class="comment">;</span></span><br><span class="line"><span class="keyword">s</span>.pop()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>shift() 和 unshift()<blockquote>
<p>shift():从数组首部删除一个元素并返回该元素<br>unshift():在数组首部添加一个或者多个元素，添加的顺序从参数尾部向前添加</p>
</blockquote>
</li>
</ul>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="comment">[1,2]</span>;</span><br><span class="line">a.unshift(3,4,<span class="comment">[6,7]</span>); // s = <span class="comment">[3,4,<span class="comment">[6,7]</span>,1,2]</span></span><br><span class="line">a.shift(); // s = <span class="comment">[4,<span class="comment">[6,7]</span>,1,2]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>toString()  toLocalString()<blockquote>
<p>toString():将数组中的每个元素转化成字符串并输出用逗号做分隔符的字符串序列，数组有多层数组嵌套的时候会递归的进行转化字符串<br>toLocalString()是toString()的本地化方法，将toString()转化的字符串本地化</p>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="string">'a'</span>]];</span><br><span class="line">s.toString();  <span class="comment">// "1,2,3,a"</span></span><br></pre></td></tr></table></figure>
<p><strong><em>ECMAScript 5 :</em></strong></p>
<ul>
<li><p>关于ECMAScript 5数组方法的一些说明：</p>
<blockquote>
<p>大多数方法的第一个参数都传递一个函数，并且对每个元素都调用一次这个函数，稀疏数组中对不存在的元素则不调用。</p>
</blockquote>
</li>
<li><p>forEach()</p>
<blockquote>
<p>从头到尾遍历数组，为每个元素调用指定的函数。forEach无法用break中途停止遍历。</p>
</blockquote>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(v)</span></span>&#123;sum+=v&#125;);</span><br><span class="line"><span class="comment">//sum = 6;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// v:当前索引的元素，i:当前索引 ，a：调用该方法的数组</span></span><br><span class="line">a.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(v,i,a)</span></span>&#123;</span><br><span class="line">a[i] = v + i;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是：a =[2,3,4];</span></span><br></pre></td></tr></table></figure>
<ul>
<li>map()<blockquote>
<p>将调用数组中的每个元素传递给指定的函数。map不改变调用它的数组本身，会返回一个新的数组，如果是稀疏数组，那么返回的数组和调用map的稀疏数组有一样的length 和 缺失元素</p>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.map(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123; <span class="keyword">return</span> x++;&#125;);</span><br><span class="line"><span class="comment">// b = [2,3,4];</span></span><br></pre></td></tr></table></figure>
<ul>
<li>filter()<blockquote>
<p>返回一个新数组，新数组是调用该函数数组的一个子集，filter中传递的函数返回true 或者 false ，true：新数组添加该元素。filter() 会跳过稀疏数组总缺少的元素，所以返回的新数组总是稠密数组</p>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.filter(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//筛选大于3的元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// b = [4,5];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩稀疏数组</span></span><br><span class="line"><span class="keyword">var</span> v = a.filter(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="literal">true</span>;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩并删除undefined 和 null 元素</span></span><br><span class="line"><span class="keyword">var</span> v = a.filter(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123; <span class="keyword">return</span> x!==<span class="literal">undefined</span> &amp;&amp; x!= <span class="literal">null</span>;&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>every() 和 some()<blockquote>
<p>逻辑判断函数，返回值都是true 或者false，every：所有元素调用判定函数返回true 最后结果才是true，遇到判定返回false则停止遍历，结果是false。some ：至少有一个元素调用判定函数返回true ，结果返回true，判定返回遇到true，则停止遍历，结果返回true。</p>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">a.every(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123; <span class="keyword">return</span> x&gt;<span class="number">0</span>&#125;);  <span class="comment">//true</span></span><br><span class="line">a.some(<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123; <span class="keyword">return</span> x &gt; <span class="number">5</span>&#125;); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>reduce() 和 reduceRight()<blockquote>
<ol>
<li>两个方法都是使用指定的函数将元素进行组合。区别在于两者的遍历数组顺序刚好相反。reduce是索引从低到高，reduceright是索引从高到低。</li>
<li>函数中需要两个参数，参数1：化简操作的函数，参数2（可选）：函数初始值（没有初始值的时候，会默认使用遍历的第一个元素的值作为初始值）<br>3.空数组的时候，不传递初始值会导致类型错误异常</li>
</ol>
</blockquote>
</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//简单的数组求和，初始值为0</span></span><br><span class="line"><span class="comment">//第一次调用时是 return 的是 0（初始值）+a;然后才是a+b </span></span><br><span class="line"><span class="keyword">var</span> res = a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span><span class="comment">&#123; return a+b;&#125;</span>,0);</span> <span class="comment">//res = 6</span></span><br><span class="line"><span class="comment">//简单的数组求积，初始值为1</span></span><br><span class="line"><span class="comment">//第一次调用时是 return 的是 1（初始值）* a;然后才是a*b </span></span><br><span class="line"><span class="keyword">var</span> res = a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span><span class="comment">&#123; return a+b;&#125;</span>,1);</span> <span class="comment">//res = 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象求并集</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="comment">&#123;x:1,a:1&#125;</span>,<span class="comment">&#123;y:2,a:2&#125;</span>,<span class="comment">&#123;z:3,a:3&#125;</span>];</span><br><span class="line"><span class="comment">//不带初始值的时候默认使用第一个遍历到的元素值</span></span><br><span class="line">a.reduce(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">union</span>)</span>);</span> <span class="comment">//结果是：&#123;x:1,y:2,z:3,a:1&#125;</span></span><br><span class="line">a.reduceRight(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">union</span>)</span>);</span> <span class="comment">//结果是：&#123;x:1,y:2,z:3,a:3&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>indexOf() 和 lastIndexOf()<blockquote>
<ol>
<li>搜索整个数组中具有给定值的元素，返回第一个找到的元素的索引，没找到则返回-1</li>
<li>indexOf ：从头到尾搜索，lastIndexOf：从尾到头搜索</li>
<li>第一个参数：给定搜索的值，参数二（可选）：指定开始搜索的索引</li>
</ol>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> i = a.indexOf(<span class="number">7</span>,<span class="number">2</span>); <span class="comment">// i = 3</span></span><br><span class="line"><span class="comment">//参数2可以为负数，表示相对末尾的偏移量</span></span><br><span class="line"><span class="keyword">var</span> i = a.lastIndexOf(<span class="number">3</span>,<span class="number">-2</span>);<span class="comment">// i = 1</span></span><br></pre></td></tr></table></figure>
<h3 id="8-数组类型"><a href="#8-数组类型" class="headerlink" title="8.数组类型"></a>8.数组类型</h3><ol>
<li>ECMAScript 5中使用Array.isArray()判定是否是数组</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array<span class="selector-class">.isArray</span>([]);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ol>
<li>ECMAScript 3中使用isArray()的方法是判断一个对象的属性是否是“Array”</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="built_in">Function</span>.isArray() || <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.protitype.toString.call(o)</span><br><span class="line">        === <span class="string">"[Object Array]"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>instanceof 在浏览器中开启多窗口多窗口时，只能正对该窗口做检测，不能全局（整个浏览器）检测，因为每个窗口都有自己的全局环境</li>
</ol>
<h3 id="9-数组相关"><a href="#9-数组相关" class="headerlink" title="9.数组相关"></a>9.数组相关</h3><h5 id="9-1-作为数组的字符串"><a href="#9-1-作为数组的字符串" class="headerlink" title="9.1 作为数组的字符串"></a>9.1 作为数组的字符串</h5><blockquote>
<p>常见的是用[] 代替字符串的chatAt()方法</p>
</blockquote>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">s</span> = <span class="string">"String"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">s</span>.chatAt(<span class="number">1</span>) == <span class="keyword">s</span>[<span class="number">1</span>]<span class="comment">; //</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为字符串是不可变值的所以不能用 s[0] = 3 的方式复制，也不能使用数组中的push(),pop(),sort(),reverse(),splice()等方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.join.call(s,<span class="string">","</span>);  <span class="comment">//结果是："S,t,r,i,n,g"</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(s,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x &gt;<span class="string">'a'</span>;&#125;).join(<span class="string">""</span>);</span><br><span class="line"><span class="comment">//结果是："tring"</span></span><br></pre></td></tr></table></figure>
<h5 id="9-2-类数组对象"><a href="#9-2-类数组对象" class="headerlink" title="9.2 类数组对象"></a>9.2 类数组对象</h5><ul>
<li><h6 id="类数组对象与数组有明显的区别。体现在数组用类数组对象没有的特点："><a href="#类数组对象与数组有明显的区别。体现在数组用类数组对象没有的特点：" class="headerlink" title="类数组对象与数组有明显的区别。体现在数组用类数组对象没有的特点："></a>类数组对象与数组有明显的区别。体现在数组用类数组对象没有的特点：</h6><blockquote>
<ol>
<li>数组中有新元素添加，会自动更新length属性</li>
<li>通过设置length的值为一个较小的非负整数截断数组</li>
<li>数组从Array.protitype中继承了有用的方法</li>
<li>数组的类属性是”Array”</li>
</ol>
</blockquote>
</li>
<li><p>通过[ ]将对象伪装成对象</p>
</li>
</ul>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o =&#123;&#125;<span class="comment">;</span></span><br><span class="line">var i = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">while(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    o[i] = i<span class="comment">;</span></span><br><span class="line">    i++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">a.lenght = i<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ECMAScript 5 中 数组方法都是通用的，所以能在类数组对象上使用，ECMAScript 3中除了toString() ,toLocalString()外的方法也是通用。<br>但是类数组对象没有继承Array.prototype，所以不能直接在类数组对象上调用数组方法，可以使用Function.call()方法调用 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="string">"0"</span>:<span class="string">"a"</span>,<span class="string">"1"</span>:<span class="string">"b"</span>,<span class="string">"2"</span>:<span class="string">"c"</span>,length:<span class="number">3</span>&#125;;<span class="comment">//类数组对象</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(a,<span class="string">"_"</span>); <span class="comment">// 结果是："a_b_c"</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.map.call(a,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.toUpperCase();</span><br><span class="line">&#125;); <span class="comment">// 结果是："["A","B","C"]"</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今日头条实习牛客网笔试题2]]></title>
      <url>dooogo.github.io/2016/04/28/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E5%AE%9E%E4%B9%A0%E7%89%9B%E5%AE%A2%E7%BD%91%E7%AC%94%E8%AF%95%E9%A2%982/</url>
      <content type="html"><![CDATA[<p>真的是很不巧合，昨晚的今日头条的实习笔试时间突然就和单片机的实验的时间重合，实验是晚上8点钟开始，而笔试时间是晚上7点到9点，因为找不到人替实验，所以只做了第二道题就赶去做实验了，说多都是泪啊</p>
<p>还是直接上题目吧</p>
<ul>
<li>提前说明<blockquote>
<p>题目的说明与要求都是我回忆写出来的，可能与原题的要求或者描述有点出入，请大家见谅</p>
</blockquote>
</li>
</ul>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="给定一个字符串，将（i-l）的子字符串反转后拼接到原字符串结尾，其中-i-表示字符串开始索引，l-表示子字符串的长度。输入格式是，第一行输入原字符串，第二行输入n表示需要进行反转拼接的子字符串的数量，接下来的n行输入i-l的值。要保证输入的正确性，拼接的字符串长度不能超过1000"><a href="#给定一个字符串，将（i-l）的子字符串反转后拼接到原字符串结尾，其中-i-表示字符串开始索引，l-表示子字符串的长度。输入格式是，第一行输入原字符串，第二行输入n表示需要进行反转拼接的子字符串的数量，接下来的n行输入i-l的值。要保证输入的正确性，拼接的字符串长度不能超过1000" class="headerlink" title="给定一个字符串，将（i,l）的子字符串反转后拼接到原字符串结尾，其中 i 表示字符串开始索引，l 表示子字符串的长度。输入格式是，第一行输入原字符串，第二行输入n表示需要进行反转拼接的子字符串的数量，接下来的n行输入i l的值。要保证输入的正确性，拼接的字符串长度不能超过1000"></a>给定一个字符串，将（i,l）的子字符串反转后拼接到原字符串结尾，其中 i 表示字符串开始索引，l 表示子字符串的长度。输入格式是，第一行输入原字符串，第二行输入n表示需要进行反转拼接的子字符串的数量，接下来的n行输入i l的值。要保证输入的正确性，拼接的字符串长度不能超过1000</h4><ul>
<li>输入样例</li>
</ul>
<blockquote>
<p>ab<br>2<br>0 2<br>1 3</p>
</blockquote>
<ul>
<li>输出结果</li>
</ul>
<blockquote>
<p>abbabba</p>
</blockquote>
<h3 id="我的思路-1"><a href="#我的思路-1" class="headerlink" title="我的思路 1"></a>我的思路 1</h3><p>题目要求是挺简单的了，显示获取原字符串str，进行反转处理的数量 n,n个（i,l）对，这里我将它们保存在一个数组中，方便获取后面获取，然后用一个StringBuilder保存拼接的字符串，最后StringBuilder toString一下即可。</p>
<h3 id="思路一-Java-Code"><a href="#思路一-Java-Code" class="headerlink" title="思路一 Java Code"></a>思路一 Java Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		String str = <span class="keyword">null</span>;  <span class="comment">//保存原字符串</span></span><br><span class="line">		<span class="keyword">int</span> lines = <span class="number">0</span>;      <span class="comment">//保存需要进行的子字符串反转拼接的次数</span></span><br><span class="line">		<span class="keyword">int</span> count[];        <span class="comment">//保存字符串的起始下标与长度</span></span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();<span class="comment">//保存拼接的字符串</span></span><br><span class="line">		<span class="keyword">while</span> (in.hasNextLine()) &#123;</span><br><span class="line">			<span class="comment">//此处有坑</span></span><br><span class="line">			str = in.nextLine();</span><br><span class="line">			 <span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br><span class="line">			 str = in.nextLine();</span><br><span class="line">			 </span><br><span class="line">			lines = in.nextInt();</span><br><span class="line">			<span class="comment">//数组的长度是需要进行的子字符串反转拼接的次数的两倍</span></span><br><span class="line">			<span class="comment">//因为每一次操作都包含起始下标与长度</span></span><br><span class="line">			count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span> * lines];</span><br><span class="line">			<span class="comment">//因为多次进行输入操作，每次提前清除上次保存的字符串</span></span><br><span class="line">			sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * lines; i++) &#123;</span><br><span class="line">				count[i] = in.nextInt();</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append(str);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines; i++) &#123;</span><br><span class="line">				<span class="comment">//起始下标加上长度就可以得到，子字符串的末尾下标</span></span><br><span class="line">				<span class="keyword">int</span> l = count[<span class="number">2</span> * i] + count[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">				<span class="comment">//安全检查，子字符串的末尾下标不能超过当前拼接得到的字符串的长度</span></span><br><span class="line">				<span class="comment">//拼接后的字符串总长度不能超过1000</span></span><br><span class="line">				<span class="keyword">if</span> (l &gt; sb.length() || sb.length() + count[<span class="number">2</span> * i + <span class="number">1</span>] &gt; <span class="number">1000</span>)</span><br><span class="line">					System.exit(<span class="number">0</span>);</span><br><span class="line">				<span class="comment">//将得到的子字符串从后将每个字符拼接到原字符串即可完成反转的操作</span></span><br><span class="line">				String temp = sb.toString().substring(count[<span class="number">2</span> * i], l);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = temp.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">					sb.append(temp.charAt(j));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(sb.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###　思路２（小改进）</p>
<p>不用多加一次循环进行进行字符的拼接操作，直接在输入（ｉ，ｌ）的时候进行字符串的反转拼接</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	String str = <span class="keyword">null</span>; <span class="comment">// 保存原字符串</span></span><br><span class="line">	<span class="keyword">int</span> lines = <span class="number">0</span>; <span class="comment">// 保存需要进行的子字符串反转拼接的次数</span></span><br><span class="line">	<span class="keyword">int</span> count[]; <span class="comment">// 保存字符串的起始下标与长度</span></span><br><span class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();<span class="comment">// 保存拼接的字符串</span></span><br><span class="line">	<span class="keyword">while</span> (in.hasNextLine()) &#123;</span><br><span class="line">		<span class="comment">// 此处有坑</span></span><br><span class="line">		str = in.nextLine();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br><span class="line">			str = in.nextLine();</span><br><span class="line"></span><br><span class="line">		lines = in.nextInt();</span><br><span class="line">		<span class="comment">// 数组的长度是需要进行的子字符串反转拼接的次数的两倍</span></span><br><span class="line">		<span class="comment">// 因为每一次操作都包含起始下标与长度</span></span><br><span class="line">		count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span> * lines];</span><br><span class="line">		<span class="comment">// 因为多次进行输入操作，每次提前清除上次保存的字符串</span></span><br><span class="line">		sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">		sb.append(str);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * lines; i++) &#123;</span><br><span class="line">			count[i] = in.nextInt();</span><br><span class="line">			<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="comment">// 起始下标加上长度就可以得到，子字符串的末尾下标</span></span><br><span class="line">				<span class="keyword">int</span> l = count[i - <span class="number">1</span>] + count[i];</span><br><span class="line">				<span class="comment">// 安全检查，子字符串的末尾下标不能超过当前拼接得到的字符串的长度</span></span><br><span class="line">				<span class="comment">// 拼接后的字符串总长度不能超过1000</span></span><br><span class="line">				<span class="keyword">if</span> (l &gt; sb.length() || sb.length() + count[i] &gt; <span class="number">1000</span>)</span><br><span class="line">					System.exit(<span class="number">0</span>);</span><br><span class="line">				<span class="comment">// 将得到的子字符串从后将每个字符拼接到原字符串即可完成反转的操作</span></span><br><span class="line">				String temp = sb.toString().substring(count[i - <span class="number">1</span>], l);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = temp.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">					sb.append(temp.charAt(j));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(sb.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>遇到的坑</li>
</ul>
<p>在循环输入的时候，第一次获取nextLine是能正确获取的，第二的时候输出结果的同时就获取了一次空字符串的nextLine，因为输入原字符串后需要输入的子字符串的数量 n ,这是就抛出了异常 java.util.InputMismatchException</p>
<pre><code>str = in.nextLine();
lines = in.nextInt();

报的异常
Exception in thread &quot;main&quot; java.util.InputMismatchException
at java.util.Scanner.throwFor(Unknown Source)
at java.util.Scanner.next(Unknown Source)
at java.util.Scanner.nextInt(Unknown Source)
at java.util.Scanner.nextInt(Unknown Source)
</code></pre><ul>
<li>填坑</li>
</ul>
<p>按照正常步骤走应该是每次循环都会先获取原字符串str = in.nextLine()在获取lines = in.nextInt() 的，可是System.out.println(sb.toString())之后就直接进行了一次in.nextLine()了，所以再次输入的字符串将变成下一个的nextInt输入，就导致了输入不匹配的异常，我的解决方案是，判断str = in.nextLine()的值是否为空，为空则需要再进行一次nextLine()操作。</p>
<pre><code>str = in.nextLine();
    if (str.equals(&quot;&quot;))
        str = in.nextLine();
lines = in.nextInt();
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[牛客实习季1st笔试回忆录]]></title>
      <url>dooogo.github.io/2016/04/19/%E7%89%9B%E5%AE%A2%E5%AE%9E%E4%B9%A0%E5%AD%A31st%E7%AC%94%E8%AF%95%E5%9B%9E%E5%BF%86%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="这是牛客网举办的实习编程赛的第一季，去打打了酱油，哈哈，感觉打酱油的份都算不上，算是充数的水货吧"><a href="#这是牛客网举办的实习编程赛的第一季，去打打了酱油，哈哈，感觉打酱油的份都算不上，算是充数的水货吧" class="headerlink" title="这是牛客网举办的实习编程赛的第一季，去打打了酱油，哈哈，感觉打酱油的份都算不上，算是充数的水货吧"></a>这是牛客网举办的实习编程赛的第一季，去打打了酱油，哈哈，感觉打酱油的份都算不上，算是充数的水货吧</h3><ul>
<li>关于这个记忆录仅是我个人根据大脑中尚有的一些影响进行问题的描述的，难免会有错漏之处。请各位看客勿要过于纠结问题的描述。如能更好的建议或者思路，甚是欢迎一起讨论。<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2>本人没有学过什么算法，仅是凭自己的理解解题，疏忽，错漏，不当，可能难免参差其中，望各位看官不要见怪。</li>
</ul>
<blockquote>
<p>第一题</p>
</blockquote>
<p>这是一个关于字符串的题目，题目的要求是将一个给定的字符串，将空格两边的单词对调，并且要求将每个单词的大小写兑换，既是大写变成小写，小写变成大写。例如：Hello World 将转换成 hELLO wORLD。</p>
<blockquote>
<p>输入样例：This is a sample,14 </p>
<p>输出样例：SAMPLE A IS tHIS</p>
</blockquote>
<ul>
<li><p>给定的函数（我用的JAVA）</p>
<p>  public String trans(String s, int n)<br>  {</p>
<pre><code>//write your code here
</code></pre><p>  ｝</p>
</li>
</ul>
<blockquote>
<p>看到这样的样例输入输出，我就理解题目的意思为：将一个字符串中已空格分隔的单词大小写转换后，逆序输出。然后我就按住这个想法做了，但是提交代码的时候，答案是错的。我就开始猜想是不是我理解错误？到现在我也?&gt;没有想清楚。感觉自己很笨。</p>
</blockquote>
<ul>
<li>上JAVA代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="keyword">new</span> Transform().trans(<span class="string">"This is a sample"</span>, <span class="number">14</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * @param s 需要转换的字符串</span><br><span class="line"> * </span><br><span class="line"> * @param n 需要转换的字符串的长度</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trans</span><span class="params">(String s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 已空格分割字符串</span></span><br><span class="line">	String a[] = s.split(<span class="string">" "</span>);</span><br><span class="line">	StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	<span class="keyword">int</span> l = a.length - <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 将分割字符串得到的数组逆序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">		String temp = a[i];</span><br><span class="line">		a[i] = a[l];</span><br><span class="line">		a[l] = temp;</span><br><span class="line">		l--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * 此处两层循环：第一层循环是分割得到的数组长度，即单词数量 第二层循环是每个单词的长度</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length(); j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = a[i].charAt(j);<span class="comment">// 获取字符的ACSII</span></span><br><span class="line">			<span class="comment">// 小写转换成大写</span></span><br><span class="line">			<span class="keyword">if</span> (c &gt;= <span class="number">97</span> &amp;&amp; c &lt;= <span class="number">122</span>)</span><br><span class="line">				sb.append((<span class="keyword">char</span>) (c - <span class="number">32</span>));</span><br><span class="line">			<span class="comment">// 大写转换成小写</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">65</span> &amp;&amp; c &lt;= <span class="number">90</span>)</span><br><span class="line">				sb.append((<span class="keyword">char</span>) (c + <span class="number">32</span>));</span><br><span class="line">			<span class="comment">// 不是字母不转换</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				sb.append((<span class="keyword">char</span>) c);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将分割掉的空格加回来</span></span><br><span class="line">           <span class="keyword">if</span> (i != a.length - <span class="number">1</span>)</span><br><span class="line">		    sb.append(<span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>上述代码测试输出结果：SAMPLE A IS tHIS </p>
</blockquote>
<ul>
<li>如果按我上述的代码的话感觉第二各参数完全用不到，老有一种自己理解错的感觉</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仅以此纪念我挫的不得了的算法]]></title>
      <url>dooogo.github.io/2016/04/16/%E4%BB%85%E4%BB%A5%E6%AD%A4%E7%BA%AA%E5%BF%B5%E6%88%91%E6%8C%AB%E7%9A%84%E4%B8%8D%E5%BE%97%E4%BA%86%E7%9A%84%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="仅以此纪念我挫的不得了的算法"><a href="#仅以此纪念我挫的不得了的算法" class="headerlink" title="仅以此纪念我挫的不得了的算法"></a>仅以此纪念我挫的不得了的算法</h1><h3 id="这是我的第一篇简书，在线笔试，感觉叫做鄙视更恰当，因为真心觉得自己的算法烂到不行了。不过远方还是充满激情的，再挫也要前进是吧！"><a href="#这是我的第一篇简书，在线笔试，感觉叫做鄙视更恰当，因为真心觉得自己的算法烂到不行了。不过远方还是充满激情的，再挫也要前进是吧！" class="headerlink" title="这是我的第一篇简书，在线笔试，感觉叫做鄙视更恰当，因为真心觉得自己的算法烂到不行了。不过远方还是充满激情的，再挫也要前进是吧！"></a>这是我的第一篇简书，在线笔试，感觉叫做鄙视更恰当，因为真心觉得自己的算法烂到不行了。不过远方还是充满激情的，再挫也要前进是吧！</h3><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote>
<p>a8  b8  c8  d8  e8  f8  g8  h8<br> a7  b7  c7  d7  e7  f7  g7  h7<br> a6  b6  c6  d6  e6  f6  g6  h6<br> a5  b5  c5  d5  e5  f5  g5  h5<br> a4  b4  c4  d4  e4  f4  g4  h4<br> a3  b3  c3  d3  e3  f3  g3  h3<br> a2  b2  c2  d2  e2  f2  g2  h2<br> a1  b1  c1  d1  e1  f1  g1  h1</p>
</blockquote>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote>
<p>这个的一个方块盘中，找从一个点到另一个点的最短距离，题目要求是能走对角线的方块的时候都走对角线    的L,R,U,D,LU,LD,RU,RD分别对应的方向是：左，右，上，下，左上，左下，右上，右下<br>输入格式：第一行是起点第二行是终点输出结果：第一行是走的步数n剩下的n行是一次移动的方向</p>
</blockquote>
<h2 id="输入输出样例："><a href="#输入输出样例：" class="headerlink" title="输入输出样例："></a>输入输出样例：</h2><blockquote>
<p>a8<br> h1<br> 7<br> RD<br> RD<br> RD<br> RD<br> RD<br> RD<br> RD</p>
</blockquote>
<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><blockquote>
<p>先将输入的坐标符号转化为坐标数，根据当前所在点与终点坐标对比判断移动方法，<br> 只要x,y坐标都不相等做x,y同时变动一位（对角线移动一位），只有X或Y不同则移动一位（水平或竖直移动），<br> 当前点，与终点X,Y坐标都相等后既是找到最短路径</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	<span class="keyword">int</span> curX = <span class="number">0</span>; <span class="comment">// 起点X坐标</span></span><br><span class="line">	<span class="keyword">int</span> curY = <span class="number">0</span>; <span class="comment">// 起点Y坐标</span></span><br><span class="line">	<span class="keyword">int</span> dstX = <span class="number">0</span>; <span class="comment">// 终点X坐标</span></span><br><span class="line">	<span class="keyword">int</span> dstY = <span class="number">0</span>; <span class="comment">// 终点Y坐标</span></span><br><span class="line">	<span class="keyword">int</span> tag = <span class="number">0</span>; <span class="comment">// 判断输入的点是起点或者终点（1：起点输入，0：终点输入）</span></span><br><span class="line">	<span class="keyword">int</span> stepCount = <span class="number">0</span>; <span class="comment">// 步数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 存放每次移动的方向</span></span><br><span class="line">	ArrayList&lt;String&gt; step = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (in.hasNextLine()) &#123;</span><br><span class="line">		String inStr = in.nextLine();</span><br><span class="line">		tag++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tag == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 将输入的字符坐标转化为数字坐标，例如：a8 -&gt; 97,56</span></span><br><span class="line">			curX = inStr.charAt(<span class="number">0</span>);</span><br><span class="line">			curY = inStr.charAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tag = <span class="number">0</span>;</span><br><span class="line">			dstX = inStr.charAt(<span class="number">0</span>);</span><br><span class="line">			dstY = inStr.charAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 每次计算前重置存放移动方向的ArrayList，与 移动的总步数</span></span><br><span class="line">			step.clear();</span><br><span class="line">			stepCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 没到达终点就一直循环</span></span><br><span class="line">			<span class="keyword">while</span> (curX != dstX || curY != dstY) &#123;</span><br><span class="line">				<span class="comment">// 当前点在终点的右上方向</span></span><br><span class="line">				<span class="keyword">if</span> (curX &gt;= dstX &amp;&amp; curY &gt;= dstY) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (curX != dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curX--;</span><br><span class="line">						curY--;</span><br><span class="line">						step.add(<span class="string">"LD"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX == dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curY--;</span><br><span class="line">						step.add(<span class="string">"D"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX != dstX &amp;&amp; curY == dstY) &#123;</span><br><span class="line">						curX--;</span><br><span class="line">						step.add(<span class="string">"L"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 当前点在终点的右下方向</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (curX &gt;= dstX &amp;&amp; curY &lt;= dstY) &#123;</span><br><span class="line">					<span class="keyword">if</span> (curX != dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curX--;</span><br><span class="line">						curY++;</span><br><span class="line">						step.add(<span class="string">"LU"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX == dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curY++;</span><br><span class="line">						step.add(<span class="string">"U"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX != dstX &amp;&amp; curY == dstY) &#123;</span><br><span class="line">						curX--;</span><br><span class="line">						step.add(<span class="string">"L"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 当前点在终点的左上方向</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (curX &lt;= dstX &amp;&amp; curY &gt;= dstY) &#123;</span><br><span class="line">					<span class="keyword">if</span> (curX != dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curX++;</span><br><span class="line">						curY--;</span><br><span class="line">						step.add(<span class="string">"RD"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX == dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curY--;</span><br><span class="line">						step.add(<span class="string">"D"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX != dstX &amp;&amp; curY == dstY) &#123;</span><br><span class="line">						curX++;</span><br><span class="line">						step.add(<span class="string">"R"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 当前点在终点的左下方向</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (curX &lt;= dstX &amp;&amp; curY &lt;= dstY) &#123;</span><br><span class="line">					<span class="keyword">if</span> (curX != dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curX++;</span><br><span class="line">						curY++;</span><br><span class="line">						step.add(<span class="string">"RU"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX == dstX &amp;&amp; curY != dstY) &#123;</span><br><span class="line">						curY++;</span><br><span class="line">						step.add(<span class="string">"U"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curX != dstX &amp;&amp; curY == dstY) &#123;</span><br><span class="line">						curX++;</span><br><span class="line">						step.add(<span class="string">"R"</span>);</span><br><span class="line">						stepCount++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*</span><br><span class="line">			 * 输出移动的步数 输出每次移动的方向</span><br><span class="line">			 */</span></span><br><span class="line">			System.out.println(stepCount);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, s = step.size(); i &lt; s; i++) &#123;</span><br><span class="line">				System.out.println(step.get(i));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	in.close();</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>欢迎拍砖以及各种喷</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 快速排序]]></title>
      <url>dooogo.github.io/2016/04/16/%E4%B8%8E-hexo-%E5%92%8C-gitpage-%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<h3 id="快速排序的思想"><a href="#快速排序的思想" class="headerlink" title="快速排序的思想"></a>快速排序的思想</h3><p>通过一趟排序将待排序的记录分割成独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序（自然而然可以想到用递归实现了），已达到整个序列的有序。</p>
<blockquote>
<p>快速排序其实是对冒泡排序的一种改进</p>
</blockquote>
<h3 id="Java-实现的代码"><a href="#Java-实现的代码" class="headerlink" title="Java 实现的代码"></a>Java 实现的代码</h3><pre><code>已实现的交换函数
this.swap(int a[],int a,int b);
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/*</span><br><span class="line">   将索引 low 到 high     区间的序列划分成两部分，其中一部分记录的关键字均比另一部分记录的关键字小，并返回枢轴（划分标记）</span><br><span class="line">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">QuickSortPartion</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = a[low];   <span class="comment">//序列的第一个元素的下标作为开始的枢轴</span></span><br><span class="line">	<span class="comment">//从两端向中间不断扫描（区间长度大于1）</span></span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">	    <span class="comment">//将比枢轴元素小的记录移动到低端</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt; pivot)</span><br><span class="line">			high--;</span><br><span class="line">		<span class="keyword">this</span>.swap(a, low, high);</span><br><span class="line">		 <span class="comment">//将比枢轴元素大的记录移动到高端</span></span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt; pivot)</span><br><span class="line">			low++;</span><br><span class="line">		<span class="keyword">this</span>.swap(a, low, high);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//返回当前的枢轴位置返回（递归划分子序列的标记位置）</span></span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//序列分区的长度大于一则继续递归划分</span></span><br><span class="line">	<span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">int</span> pivot = QuickSortPartion(a, low, high - <span class="number">1</span>);</span><br><span class="line">		QuickSort(a, low, pivot);  <span class="comment">//低子序列递归排序</span></span><br><span class="line">		QuickSort(a, pivot + <span class="number">1</span>, high);  <span class="comment">//高子序列递归排序</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序的一些注意点"><a href="#快速排序的一些注意点" class="headerlink" title="快速排序的一些注意点"></a>快速排序的一些注意点</h3><ul>
<li>快速排序是不稳定排序</li>
<li>平均时间效率 O(nlogn)</li>
<li>待排序序列基本有序时退化成冒泡排序，时间效率O(n^2)</li>
<li>快速排序需要一个栈空间来实现递归</li>
<li>在同数量级的排序算法中平均性能最高</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[与GitPage 和 Hexo的第一天]]></title>
      <url>dooogo.github.io/2016/04/15/%E4%B8%8EGitPage-Hexo%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<h2 id="世界真的很精彩，时间不会等你而暂停，不要停止你前进的脚步"><a href="#世界真的很精彩，时间不会等你而暂停，不要停止你前进的脚步" class="headerlink" title="世界真的很精彩，时间不会等你而暂停，不要停止你前进的脚步"></a>世界真的很精彩，时间不会等你而暂停，不要停止你前进的脚步</h2>]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>dooogo.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h3 id="这就是我啦"><a href="#这就是我啦" class="headerlink" title="这就是我啦"></a>这就是我啦</h3><p><img src="/images/me.jpg" alt="Alt text"></p>
<h3 id="我的其他活动"><a href="#我的其他活动" class="headerlink" title="我的其他活动"></a>我的其他活动</h3><p><a href="http://weibo.com/u/1853941987/home?wvr=5" title="我的微博" target="_blank" rel="external">我的微博</a><br><a href="https://github.com/donlan" title="我的Github" target="_blank" rel="external">我的Github</a><br><a href="http://www.jianshu.com/users/04c42edcd1bb/latest_articles" title="我的简书" target="_blank" rel="external">我的简书</a></p>
<p><strong>QQ:760625325</strong><br><strong>Mail:stonelavender@hotmail.com</strong></p>
<h3 id="打赏我"><a href="#打赏我" class="headerlink" title="打赏我"></a>打赏我</h3><p><img src="/images/pay.png" alt="Alt text"></p>
<div style="LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000"><br>作者：<br><a href="http://dooogo.github.io/">Doogo</a> <br>出处：<br><a href="http://dooogo.github.io/">http://dooogo.github.io/</a><br><br><br>本文基于<a target="_blank" title="Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)" href="http://creativecommons.org/licenses/by-sa/4.0/"> 知识共享署名-相同方式共享 4.0 </a><br>国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名<br><a href="http://dooogo.github.io/">Doogo</a>及链接。<br></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>dooogo.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>dooogo.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>dooogo.github.io/links/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
